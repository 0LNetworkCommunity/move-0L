/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/Resources.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $ShiftRight(224, calldataload(0))
                switch selector
                case 0x6fd78c6f
                {
                    // increment_a(address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$address$(4, calldatasize())
                    A2_M_increment_a(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xbb29998e
                {
                    // test(address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$address$(4, calldatasize())
                    let ret_0 := A2_M_test(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x03e6d7c2
                {
                    // unpublish(address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$address$(4, calldatasize())
                    let ret_0 := A2_M_unpublish(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$A2_M_S$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function abi_decode_address(offset, end) -> value {
                value := calldataload(offset)
                validator_address(value)
            }
            function abi_decode_tuple_$address$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_bool(value, pos) {
                mstore(pos, cleanup_bool(value))
            }
            function abi_encode_tuple_(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_encode_tuple_$A2_M_S$(headStart ,value_0) -> tail {
                tail := add(headStart, 64)
                (value_0, add(headStart, 0))
            }
            function abi_encode_tuple_$bool$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_bool(value_0, add(headStart, 0))
            }
            function cleanup_address(value) -> cleaned {
                cleaned := add(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function cleanup_bool(value) -> cleaned {
                cleaned := iszero(iszero(value))
            }
            function validator_address(value) {
                if iszero(eq(value, cleanup_address(value))) { $Abort(95) }
            }

            // Dummy calls to reference callables for Yul optimizer
            A2_M_increment_a(sload(100))
            let $dummy0 := A2_M_test(sload(100))
            sstore(200, $dummy0)
            let $dummy1 := A2_M_unpublish(sload(101))
            sstore(201, $dummy1)

            function A2_M_increment_a(addr) {
                let r, $t2, $t3, $t4, $t5, $t6, $t7
                // $t2 := borrow_global<M::S>($t0)
                /// @src 2:496:513
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x698265eb, addr)
                    if not($StorageLoadU8($base_offset)) {
                      $AbortBuiltin()
                    }
                    $t2 := $MakePtr(true, add($base_offset, 32))
                }
                // $t3 := borrow_field<M::S>.a($t2)
                /// @src 2:538:541
                $t3 := $IndexPtr($LoadU256($t2), 32)
                // $t4 := read_ref($t3)
                /// @src 2:538:541
                $t4 := $LoadU64($t3)
                // $t5 := 1
                /// @src 2:544:545
                $t5 := 1
                // $t6 := +($t4, $t5)
                /// @src 2:542:543
                $t6 := $AddU64($t4, $t5)
                // $t7 := borrow_field<M::S>.a($t2)
                /// @src 2:532:535
                $t7 := $IndexPtr($LoadU256($t2), 32)
                // write_ref($t7, $t6)
                /// @src 2:532:545
                $StoreU64($t7, $t6)
                // return ()
                /// @src 2:532:545
            }

            function A2_M_test(addr) -> $result {
                let $t1
                // $t1 := exists<M::S>($t0)
                /// @src 2:394:400
                $t1 := $StorageLoadU8($MakeTypeStorageBase(0, 0x698265eb, addr))
                // return $t1
                /// @src 2:394:409
                $result := $t1
            }

            function A2_M_unpublish(a) -> $result {
                let $t1
                // $t1 := move_from<M::S>($t0)
                /// @src 2:314:323
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x698265eb, a)
                    if not($StorageLoadU8($base_offset)) {
                      $AbortBuiltin()
                    }
                    $StorageStoreU8($base_offset, false)
                    {
                        let $src := add($base_offset, 32)
                        let $dst
                        $dst := $Malloc(40)
                        {
                            let $linked_src := $AlignedStorageLoad(add($src, 0))
                            let $linked_dst
                            $linked_dst := $Malloc(1)
                            mstore(add($linked_dst, 0), $AlignedStorageLoad(add($linked_src, 0)))
                            $AlignedStorageStore(add($linked_src, 0), 0)
                            mstore(add($dst, 0), $linked_dst)
                            $AlignedStorageStore(add($src, 0), 0)
                        }
                        mstore(add($dst, 32), $AlignedStorageLoad(add($src, 32)))
                        $AlignedStorageStore(add($src, 32), 0)
                        $t1 := $dst
                    }
                }
                // return $t1
                /// @src 2:314:329
                $result := $t1
            }

            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shr(add(size, 31), 5)))
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(offs, 1))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(ptr, 1)
            }
            function $ToWordOffs(offs) -> word_offs, bit_offs {
              word_offs := shr(offs, 5)
              bit_offs := shl(and(offs, 0x1F), 3)
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, group)
              key := keccak256(32, 36)
            }
            function $MakeTypeStorageBase(category, type_hash, id) -> offs {
              offs := or(shl(category, 252), or(shl(type_hash, 220), shl(id, 60)))
            }
            function $IndexPtr(ptr, offs) -> new_ptr {
              new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
            }
            function $StorageLoadU8(offs) -> val {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := and(shr(sload(key), bit_offs), 0xff)
            }
            function $StorageStoreU8(offs, val) {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let word := sload(key)
              word := or(and(word, not(shl(0xff, bit_offs))), shl(val, bit_offs))
              mstore(key, word)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := and(mload(offs), 0xffffffffffffffff)
            }
            function $StorageLoadU64(offs) -> val {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := and(shr(sload(key), bit_offs), 0xffffffffffffffff)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 64) {
                let overflow_bits := sub(64, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                val := or(val, shl(and(sload(key), mask), used_bits))
              }
            }
            function $StoreU64(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU64(offs, val)
              }
              default {
                $StorageStoreU64(offs, val)
              }
            }
            function $MemoryStoreU64(offs, val) {
              mstore(offs, or(and(mload(offs), not(0xffffffffffffffff)), val))
            }
            function $StorageStoreU64(offs, val) {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let word := sload(key)
              word := or(and(word, not(shl(0xffffffffffffffff, bit_offs))), shl(val, bit_offs))
              mstore(key, word)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 64) {
                let overflow_bits := sub(64, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, or(and(sload(key), not(mask)), shr(val, used_bits)))
              }
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := mload(offs)
            }
            function $StorageLoadU256(offs) -> val {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := shr(sload(key), bit_offs)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 256) {
                let overflow_bits := sub(256, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                val := or(val, shl(and(sload(key), mask), used_bits))
              }
            }
            function $AlignedStorageLoad(offs) -> val {
              let word_offs := shr(offs, 5)
              val := sload($StorageKey(0, word_offs))
            }
            function $AlignedStorageStore(offs, val) {
              let word_offs := shr(offs, 5)
              sstore($StorageKey(0, word_offs), val)
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $ShiftRight(bits, value) -> r {
                r := shr(bits, value) // evm version >= constantinople
            }
        }
    }
}


!! Errors compiling Yul

Warning: Yul is still experimental. Please use the output with care.
Error: Literal or identifier expected.
  --> <stdin>:80:17:
   |
80 |                 (value_0, add(headStart, 0))
   |                 ^

Error: Expected keyword "data" or "object" or "}".
  --> <stdin>:80:17:
   |
80 |                 (value_0, add(headStart, 0))
   |                 ^
