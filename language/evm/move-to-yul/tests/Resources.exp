/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/Resources.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x6fd78c6f
                {
                    // increment_a(address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$address$(4, calldatasize())
                    A2_M_increment_a(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xbb29998e
                {
                    // test(address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$address$(4, calldatasize())
                    let ret_0 := A2_M_test(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_increment_a(addr) {
                let r, $t2, $t3, $t4, $t5, $t6, $t7
                // $t2 := borrow_global<M::S>($t0)
                /// @src 2:496:513
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x698265eb, addr)
                    if not($StorageLoadU8($base_offset)) {
                      $AbortBuiltin()
                    }
                    $t2 := $MakePtr(true, add($base_offset, 32))
                }
                // $t3 := borrow_field<M::S>.a($t2)
                /// @src 2:538:541
                $t3 := $IndexPtr($LoadU256($t2), 32)
                // $t4 := read_ref($t3)
                /// @src 2:538:541
                $t4 := $LoadU64($t3)
                // $t5 := 1
                /// @src 2:544:545
                $t5 := 1
                // $t6 := +($t4, $t5)
                /// @src 2:542:543
                $t6 := $AddU64($t4, $t5)
                // $t7 := borrow_field<M::S>.a($t2)
                /// @src 2:532:535
                $t7 := $IndexPtr($LoadU256($t2), 32)
                // write_ref($t7, $t6)
                /// @src 2:532:545
                $StoreU64($t7, $t6)
                // return ()
                /// @src 2:532:545
            }

            function A2_M_test(addr) -> $result {
                let $t1
                // $t1 := exists<M::S>($t0)
                /// @src 2:394:400
                $t1 := $StorageLoadU8($MakeTypeStorageBase(0, 0x698265eb, addr))
                // return $t1
                /// @src 2:394:409
                $result := $t1
            }

            function A2_M_unpublish(a) -> $result {
                let $t1
                // $t1 := move_from<M::S>($t0)
                /// @src 2:314:323
                {
                    let $base_offset := $MakeTypeStorageBase(0, 0x698265eb, a)
                    if not($StorageLoadU8($base_offset)) {
                      $AbortBuiltin()
                    }
                    $StorageStoreU8($base_offset, false)
                    {
                        let $src := add($base_offset, 32)
                        let $dst
                        $dst := $Malloc(40)
                        {
                            let $linked_src := $AlignedStorageLoad(add($src, 0))
                            let $linked_dst
                            $linked_dst := $Malloc(1)
                            mstore(add($linked_dst, 0), $AlignedStorageLoad(add($linked_src, 0)))
                            $AlignedStorageStore(add($linked_src, 0), 0)
                            mstore(add($dst, 0), $linked_dst)
                            $AlignedStorageStore(add($src, 0), 0)
                        }
                        mstore(add($dst, 32), $AlignedStorageLoad(add($src, 32)))
                        $AlignedStorageStore(add($src, 32), 0)
                        $t1 := $dst
                    }
                }
                // return $t1
                /// @src 2:314:329
                $result := $t1
            }

            function abi_encode_tuple_$bool$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_bool(value_0, add(headStart, 0))
            }
            function abi_encode_bool(value, pos) {
                mstore(pos, cleanup_bool(value))
            }
            function cleanup_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_decode_tuple_$address$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_address(offset, end) -> value {
                value := calldataload(offset)
                validator_address(value)
            }
            function validator_address(value) {
                if iszero(eq(value, cleanup_address(value))) { $Abort(95) }
            }
            function cleanup_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_encode_tuple_(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(size, 3), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $InjectBytes(word, start, size, bytes) -> new_word {
               let shift_bits := shl(3, sub(sub(32, start), size))
               // Blend out the bits which we inject
               let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
               word := and(word, neg_mask)
               // Overlay the bits we inject
               new_word := or(word, shl(shift_bits, bytes))
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if not(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageStoreBytes(offs, size, bytes) {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              switch overflow_bytes
              case 0 {
                sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
              }
              default {
                // Shift the higher bytes to the right
                let used_bytes := sub(size, overflow_bytes)
                let higher_bytes := shr(used_bytes, bytes)
                let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
                sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, group)
              key := keccak256(32, 36)
            }
            function $MakeTypeStorageBase(category, type_hash, id) -> offs {
              offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
            }
            function $IndexPtr(ptr, offs) -> new_ptr {
              new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
            }
            function $StorageLoadU8(offs) -> val {
              val := $StorageLoadBytes(offs, 1)
            }
            function $StorageStoreU8(offs, val) {
              $StorageStoreBytes(offs, 1, val)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $StorageLoadU64(offs) -> val {
              val := $StorageLoadBytes(offs, 8)
            }
            function $StoreU64(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU64(offs, val)
              }
              default {
                $StorageStoreU64(offs, val)
              }
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $StorageStoreU64(offs, val) {
              $StorageStoreBytes(offs, 8, val)
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $StorageLoadU256(offs) -> val {
              val := $StorageLoadBytes(offs, 32)
            }
            function $AlignedStorageLoad(offs) -> val {
              let word_offs := shr(5, offs)
              val := sload($StorageKey(0, word_offs))
            }
            function $AlignedStorageStore(offs, val) {
              let word_offs := shr(5, offs)
              sstore($StorageKey(0, word_offs), val)
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Optimized Yul

/// @use-src 2:"tests/Resources.move"
object "A2_M" {
    code {
        {
            let _1 := datasize("A2_M_deployed")
            codecopy(0, dataoffset("A2_M_deployed"), _1)
            return(0, _1)
        }
    }
    object "A2_M_deployed" {
        code {
            {
                let _1 := 0
                mstore(_1, memoryguard(0xa0))
                if iszero(lt(calldatasize(), 4))
                {
                    switch shr(224, calldataload(_1))
                    case 0x6fd78c6f {
                        if callvalue()
                        {
                            mstore(_1, 99)
                            revert(24, 8)
                        }
                        let _2 := or(shl(220, 0x698265eb), shl(60, abi_decode_address(calldatasize())))
                        if not($StorageLoadBytes(_2))
                        {
                            mstore(_1, not(0))
                            revert(24, 8)
                        }
                        let _3 := 1
                        let $t2 := or(true, shl(_3, add(_2, 32)))
                        let _4 := $LoadU256($t2)
                        let _5 := shl(_3, add(shr(_3, _4), 32))
                        let _6 := and(_4, _3)
                        let val := _1
                        let offs := shr(_3, or(_6, _5))
                        switch or(_6, and(_5, _3))
                        case 0 { val := shr(192, mload(offs)) }
                        default {
                            val := $StorageLoadBytes_919(offs)
                        }
                        $StoreU64($IndexPtr($LoadU256($t2)), $AddU64(val))
                        return(mload(_1), _1)
                    }
                    case 0xbb29998e {
                        if callvalue() { $Abort_922() }
                        let ret := A2_M_test(abi_decode_address(calldatasize()))
                        let memPos := mload(_1)
                        return(memPos, sub(abi_encode_bool$(memPos, ret), memPos))
                    }
                }
                $Abort()
            }
            function A2_M_test(addr) -> $result
            {
                $result := $StorageLoadBytes(or(shl(220, 0x698265eb), shl(60, addr)))
            }
            function abi_encode_bool$(headStart, value) -> tail
            {
                tail := add(headStart, 32)
                mstore(headStart, and(value, 0xff))
            }
            function abi_decode_address(dataEnd) -> value
            {
                if slt(add(dataEnd, not(3)), 32)
                {
                    mstore(0, 96)
                    revert(24, 8)
                }
                let value_1 := calldataload(4)
                if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1))))
                {
                    mstore(0, 95)
                    revert(24, 8)
                }
                value := value_1
            }
            function $Abort_922()
            {
                mstore(0, 99)
                revert(24, 8)
            }
            function $Abort()
            {
                mstore(0, 97)
                revert(24, 8)
            }
            function $ExtractBytes(word, size) -> bytes
            {
                switch size
                case 1 { bytes := byte(0, word) }
                default {
                    bytes := and(shr(shl(3, sub(32, size)), word), add(shl(shl(size, 3), 1), not(0)))
                }
            }
            function $InjectBytes_934(word, start, bytes) -> new_word
            {
                let shift_bits := shl(3, add(sub(32, start), not(7)))
                new_word := or(and(word, not(shl(shift_bits, not(0)))), shl(shift_bits, bytes))
            }
            function $InjectBytes_935(word, size, bytes) -> new_word
            {
                let shift_bits := shl(3, sub(32, size))
                new_word := or(and(word, not(shl(shift_bits, add(shl(shl(size, 3), 1), not(0))))), shl(shift_bits, bytes))
            }
            function $InjectBytes(word, start, size, bytes) -> new_word
            {
                let shift_bits := shl(3, sub(32, add(start, size)))
                new_word := or(and(word, not(shl(shift_bits, add(shl(shl(size, 3), 1), not(0))))), shl(shift_bits, bytes))
            }
            function $OverflowBytes(byte_offset) -> overflow_bytes
            {
                switch gt(8, sub(32, byte_offset))
                case 0 { overflow_bytes := 0 }
                default {
                    overflow_bytes := add(byte_offset, not(23))
                }
            }
            function $StorageLoadBytes(offs) -> val
            {
                let word_offs := shr(5, offs)
                let byte_offset := and(offs, 0x1F)
                mstore(32, word_offs)
                mstore(64, 0)
                val := byte(byte_offset, sload(keccak256(32, 36)))
                let overflow_bytes := 0
                switch gt(1, sub(32, byte_offset))
                case 0 {
                    overflow_bytes := overflow_bytes
                }
                default {
                    overflow_bytes := add(byte_offset, not(30))
                }
                if not(iszero(overflow_bytes))
                {
                    mstore(32, add(word_offs, 1))
                    mstore(64, 0)
                    val := or(shl(shl(3, overflow_bytes), val), $ExtractBytes(sload(keccak256(32, 36)), overflow_bytes))
                }
            }
            function $StorageLoadBytes_919(offs) -> val
            {
                let word_offs := shr(5, offs)
                let byte_offset := and(offs, 0x1F)
                mstore(32, word_offs)
                mstore(64, 0)
                let _1 := sload(keccak256(32, 36))
                let _2 := sub(32, byte_offset)
                val := shr(shl(3, add(_2, not(7))), _1)
                let overflow_bytes := 0
                switch gt(8, _2)
                case 0 {
                    overflow_bytes := overflow_bytes
                }
                default {
                    overflow_bytes := add(byte_offset, not(23))
                }
                if not(iszero(overflow_bytes))
                {
                    mstore(32, add(word_offs, 1))
                    mstore(64, 0)
                    val := or(shl(shl(3, overflow_bytes), val), $ExtractBytes(sload(keccak256(32, 36)), overflow_bytes))
                }
            }
            function $IndexPtr(ptr) -> new_ptr
            {
                new_ptr := or(and(ptr, 1), shl(1, add(shr(1, ptr), 32)))
            }
            function $StoreU64(ptr, val)
            {
                let offs := shr(1, ptr)
                switch and(ptr, 1)
                case 0 {
                    mstore(offs, or(and(mload(offs), sub(shl(192, 1), 1)), shl(192, val)))
                }
                default {
                    let word_offs := shr(6, ptr)
                    let byte_offset := and(offs, 0x1F)
                    mstore(32, word_offs)
                    mstore(64, 0)
                    let key := keccak256(32, 36)
                    let overflow_bytes := $OverflowBytes(byte_offset)
                    switch overflow_bytes
                    case 0 {
                        sstore(key, $InjectBytes_934(sload(key), byte_offset, val))
                    }
                    default {
                        let used_bytes := sub(8, overflow_bytes)
                        sstore(key, $InjectBytes(sload(key), byte_offset, used_bytes, shr(used_bytes, val)))
                        mstore(32, add(word_offs, 1))
                        mstore(64, 0)
                        let key_1 := keccak256(32, 36)
                        sstore(key_1, $InjectBytes_935(sload(key_1), overflow_bytes, and(val, add(shl(shl(overflow_bytes, 3), 1), not(0)))))
                    }
                }
            }
            function $LoadU256(ptr) -> val
            {
                let offs := shr(1, ptr)
                switch and(ptr, 1)
                case 0 { val := mload(offs) }
                default {
                    let val_1 := 0
                    let word_offs := shr(6, ptr)
                    let byte_offset := and(offs, 0x1F)
                    let _1 := 32
                    mstore(_1, word_offs)
                    mstore(64, val_1)
                    let _2 := sload(keccak256(_1, 36))
                    let _3 := sub(_1, byte_offset)
                    val_1 := shr(shl(3, add(_3, not(31))), _2)
                    let overflow_bytes := 0
                    switch gt(_1, _3)
                    case 0 {
                        overflow_bytes := overflow_bytes
                    }
                    default { overflow_bytes := byte_offset }
                    if not(iszero(overflow_bytes))
                    {
                        mstore(_1, add(word_offs, 1))
                        mstore(64, 0)
                        val_1 := or(shl(shl(3, overflow_bytes), val_1), $ExtractBytes(sload(keccak256(_1, 36)), overflow_bytes))
                    }
                    val := val_1
                }
            }
            function $AddU64(x) -> r
            {
                if lt(sub(0xffffffffffffffff, x), 1)
                {
                    mstore(0, not(0))
                    revert(24, 8)
                }
                r := add(x, 1)
            }
        }
    }
}

!! Move-To-Yul Diagnostics:
 warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/Resources.move:19:2
   │
19 │ ╭     fun unpublish(a: address): S acquires S {
20 │ │         move_from<S>(a)
21 │ │     }
   │ ╰─────^
