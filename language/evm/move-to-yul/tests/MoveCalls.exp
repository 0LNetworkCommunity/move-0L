/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/MoveCalls.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            function A2_M_f(x) -> $result {
                let y, $t2, $t3, $t4, $t5, $t6
                $t2, $t3 := A2_M_g(x)
                $t4 := 1
                /// @src 2:201:202
                $t5 := $Sub($t3, $t4)
                $t6 := A2_M_h($t5)
                /// @src 2:197:205
                $result := $t6
            }

            function A2_M_h(x) -> $result {
                let $t1, $t2, $t3
                $t1 := A2_M_k$u64$(x)
                $t2 := 1
                /// @src 2:243:244
                $t3 := $AddU64($t1, $t2)
                /// @src 2:238:246
                $result := $t3
            }

            function A2_M_k$u64$(x) -> $result {
                /// @src 2:274:275
                $result := x
            }

            function A2_M_g(x) -> ($result0, $result1) {
                /// @src 2:309:315
                $result0 := x
                $result1 := x
            }

            function $AbortBuiltin() {
                $Abort(-1)
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
        }
    }
}
