/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/MoveCalls.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(96))

            // Dummy calls to reference callables for Yul optimizer
            let $dummy0 := A2_M_f(sload(100))
            sstore(200, $dummy0)

            function A2_M_f(x) -> $result {
                let y, $t2, $t3, $t4, $t5, $t6
                // ($t2, $t3) := M::g($t0)
                $t2, $t3 := A2_M_g(x)
                // destroy($t2)
                // $t4 := 1
                $t4 := 1
                // $t5 := -($t3, $t4)
                /// @src 2:201:202
                $t5 := $Sub($t3, $t4)
                // $t6 := M::h($t5)
                $t6 := A2_M_h($t5)
                // return $t6
                /// @src 2:197:205
                $result := $t6
            }

            function A2_M_h(x) -> $result {
                let $t1, $t2, $t3
                // $t1 := M::k<u64>($t0)
                $t1 := A2_M_k$u64$(x)
                // $t2 := 1
                $t2 := 1
                // $t3 := +($t1, $t2)
                /// @src 2:243:244
                $t3 := $AddU64($t1, $t2)
                // return $t3
                /// @src 2:238:246
                $result := $t3
            }

            function A2_M_k$u64$(x) -> $result {
                // return $t0
                /// @src 2:274:275
                $result := x
            }

            function A2_M_g(x) -> $result0, $result1 {
                // return ($t0, $t0)
                /// @src 2:309:315
                $result0 := x
                $result1 := x
            }

            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
        }
    }
}


!! Optimized Yul

Pretty printed source:
/// @use-src 2:"tests/MoveCalls.move"
object "A2_M" {
    code {
        {
            let _1 := datasize("A2_M_deployed")
            codecopy(0, dataoffset("A2_M_deployed"), _1)
            return(0, _1)
        }
    }
    object "A2_M_deployed" {
        code {
            {
                mstore(0, memoryguard(0x60))
                let _1 := sload(100)
                if lt(_1, 1) { revert(0, 0) }
                if lt(add(sub(0xffffffffffffffff, _1), 1), 1) { revert(0, 0) }
                sstore(200, _1)
            }
        }
    }
}
