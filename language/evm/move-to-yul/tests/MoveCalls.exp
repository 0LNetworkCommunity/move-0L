/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/MoveCalls.move"


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x70e8dbcb
                {
                    // f(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$u64$(4, calldatasize())
                    let ret_0 := A2_M_f(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$u64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_f(x) -> $result {
                let y, $t2, $t3, $t4, $t5, $t6
                // ($t2, $t3) := M::g($t0)
                /// @src 2:187:191
                $t2, $t3 := A2_M_g(x)
                // destroy($t2)
                /// @src 2:179:180
                // $t4 := 1
                /// @src 2:203:204
                $t4 := 1
                // $t5 := -($t3, $t4)
                /// @src 2:201:202
                $t5 := $Sub($t3, $t4)
                // $t6 := M::h($t5)
                /// @src 2:197:205
                $t6 := A2_M_h($t5)
                // return $t6
                /// @src 2:197:205
                $result := $t6
            }

            function A2_M_h(x) -> $result {
                let $t1, $t2, $t3
                // $t1 := M::k<u64>($t0)
                /// @src 2:238:242
                $t1 := A2_M_k$u64$(x)
                // $t2 := 1
                /// @src 2:245:246
                $t2 := 1
                // $t3 := +($t1, $t2)
                /// @src 2:243:244
                $t3 := $AddU64($t1, $t2)
                // return $t3
                /// @src 2:238:246
                $result := $t3
            }

            function A2_M_k$u64$(x) -> $result {
                // return $t0
                /// @src 2:274:275
                $result := x
            }

            function A2_M_g(x) -> $result0, $result1 {
                // return ($t0, $t0)
                /// @src 2:309:315
                $result0 := x
                $result1 := x
            }

            function abi_encode_tuple_$u64$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_u64(value_0, add(headStart, 0))
            }
            function abi_encode_u64(value, pos) {
                mstore(pos, cleanup_u64(value))
            }
            function cleanup_u64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_tuple_$u64$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_u64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_u64(offset, end) -> value {
                value := calldataload(offset)
                validator_u64(value)
            }
            function validator_u64(value) {
                if iszero(eq(value, cleanup_u64(value))) { $Abort(95) }
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul
