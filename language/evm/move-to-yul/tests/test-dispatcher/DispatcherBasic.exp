/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 3:"tests/test-dispatcher/DispatcherBasic.move"


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xe44f11ec
                {
                    // return_0()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_return_0()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$u128$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x5087af69
                {
                    // return_1()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_return_1()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$u128$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x249088d0
                {
                    // return_2()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_return_2()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$u128$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_return_0() -> $result {
                let $t0
                // $t0 := 0
                /// @src 3:79:80
                $t0 := 0
                // return $t0
                /// @src 3:79:80
                $result := $t0
            }

            function A2_M_return_1() -> $result {
                let $t0
                // $t0 := 1
                /// @src 3:133:134
                $t0 := 1
                // return $t0
                /// @src 3:133:134
                $result := $t0
            }

            function A2_M_return_2() -> $result {
                let $t0
                // $t0 := 2
                /// @src 3:190:191
                $t0 := 2
                // return $t0
                /// @src 3:190:191
                $result := $t0
            }

            function abi_encode_tuple_$u128$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_u128(value_0, add(headStart, 0))
            }
            function abi_encode_u128(value, pos) {
                mstore(pos, cleanup_u128(value))
            }
            function cleanup_u128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Optimized Yul

/// @use-src 3:"tests/test-dispatcher/DispatcherBasic.move"
object "A2_M" {
    code {
        {
            let _1 := datasize("A2_M_deployed")
            codecopy(0, dataoffset("A2_M_deployed"), _1)
            return(0, _1)
        }
    }
    object "A2_M_deployed" {
        code {
            {
                let _1 := 0
                mstore(_1, memoryguard(0xa0))
                if iszero(lt(calldatasize(), 4))
                {
                    switch shr(224, calldataload(_1))
                    case 0xe44f11ec {
                        if callvalue()
                        {
                            mstore(_1, 99)
                            revert(24, 8)
                        }
                        let memPos := mload(_1)
                        return(memPos, sub(abi_encode_u128(memPos), memPos))
                    }
                    case 0x5087af69 {
                        if callvalue() { $Abort_82() }
                        let memPos_1 := mload(_1)
                        return(memPos_1, sub(abi_encode_u128_85(memPos_1), memPos_1))
                    }
                    case 0x249088d0 {
                        if callvalue() { $Abort_82() }
                        let memPos_2 := mload(_1)
                        return(memPos_2, sub(abi_encode_u128_87(memPos_2), memPos_2))
                    }
                }
                $Abort()
            }
            function abi_encode_u128(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(headStart, 0)
            }
            function abi_encode_u128_85(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(headStart, 1)
            }
            function abi_encode_u128_87(headStart) -> tail
            {
                tail := add(headStart, 32)
                mstore(headStart, 2)
            }
            function $Abort_82()
            {
                mstore(0, 99)
                revert(24, 8)
            }
            function $Abort()
            {
                mstore(0, 97)
                revert(24, 8)
            }
        }
    }
}
