/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 11:"tests/test-dispatcher/DispatcherRevert.move"


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xe44f11ec
                {
                    // return_0()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_return_0()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$u128$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_return_0() -> $result {
                let $t0
                // $t0 := 0
                /// @src 11:80:81
                $t0 := 0
                // return $t0
                /// @src 11:80:81
                $result := $t0
            }

            function abi_encode_tuple_$u128$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_u128(value_0, add(headStart, 0))
            }
            function abi_encode_u128(value, pos) {
                mstore(pos, cleanup_u128(value))
            }
            function cleanup_u128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Optimized Yul

/// @use-src 11:"tests/test-dispatcher/DispatcherRevert.move"
object "A2_M" {
    code {
        {
            let _1 := datasize("A2_M_deployed")
            codecopy(0, dataoffset("A2_M_deployed"), _1)
            return(0, _1)
        }
    }
    object "A2_M_deployed" {
        code {
            {
                let _1 := 0
                mstore(_1, memoryguard(0xa0))
                if iszero(lt(calldatasize(), 4))
                {
                    if eq(0xe44f11ec, shr(224, calldataload(_1)))
                    {
                        if callvalue()
                        {
                            mstore(_1, 99)
                            revert(24, 8)
                        }
                        let memPos := mload(_1)
                        mstore(memPos, _1)
                        return(memPos, 32)
                    }
                }
                mstore(_1, 97)
                revert(24, 8)
            }
        }
    }
}
