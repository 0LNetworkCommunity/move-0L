/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xc938cd4b
                {
                    // add(int192,uint32)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$int192_uint32$(4, calldatasize())
                    let ret_0, ret_1 := A2_M_f1(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$int256_int24$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x90b89a6b
                {
                    // fun_address(address,address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_address$(4, calldatasize())
                    let ret_0 := A2_M_f2(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$address$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x7d19f4c8
                {
                    // $_fun1$(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64$(4, calldatasize())
                    let ret_0 := A2_M_fun_1(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$int64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xf0619891
                {
                    // no_para_return()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_M_no_para_return()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_f1(x, y) -> $result0, $result1 {
                // return ($t0, $t1)
                $result0 := x
                $result1 := y
            }

            function A2_M_f2(_signer, addr) -> $result {
                // return $t1
                $result := addr
            }

            function A2_M_f3(_vec0, _vec1, _vec2, _vec3, _vec4) -> $result {
                let $t5
                // $t5 := 2
                $t5 := 2
                // return $t5
                $result := $t5
            }

            function A2_M_f4(_s, _s1) {
                // return ()
            }

            function A2_M_fun_1(x) -> $result {
                // return $t0
                $result := x
            }

            function A2_M_no_para_return() {
                // return ()
            }

            function abi_encode_tuple_(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_encode_tuple_$int64$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_int64(value_0, add(headStart, 0))
            }
            function abi_encode_int64(value, pos) {
                mstore(pos, cleanup_int64(value))
            }
            function cleanup_int64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_tuple_$uint64$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_uint64(value)
            }
            function validator_uint64(value) {
                if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_encode_tuple_$address$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_address(value_0, add(headStart, 0))
            }
            function abi_encode_address(value, pos) {
                mstore(pos, cleanup_address(value))
            }
            function cleanup_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$address_address$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_address(offset, end) -> value {
                value := calldataload(offset)
                validator_address(value)
            }
            function validator_address(value) {
                if iszero(eq(value, cleanup_address(value))) { $Abort(95) }
            }
            function abi_encode_tuple_$int256_int24$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 64)
                abi_encode_int256(value_0, add(headStart, 0))
                abi_encode_int24(value_1, add(headStart, 32))
            }
            function abi_encode_int24(value, pos) {
                mstore(pos, cleanup_int24(value))
            }
            function cleanup_int24(value) -> cleaned {
                cleaned := and(value, 0xffffff)
            }
            function abi_encode_int256(value, pos) {
                mstore(pos, cleanup_int256(value))
            }
            function cleanup_int256(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$int192_uint32$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_int192(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint32(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint32(offset, end) -> value {
                value := calldataload(offset)
                validator_uint32(value)
            }
            function validator_uint32(value) {
                if iszero(eq(value, cleanup_uint32(value))) { $Abort(95) }
            }
            function cleanup_uint32(value) -> cleaned {
                cleaned := and(value, 0xffffffff)
            }
            function abi_decode_int192(offset, end) -> value {
                value := calldataload(offset)
                validator_int192(value)
            }
            function validator_int192(value) {
                if iszero(eq(value, cleanup_int192(value))) { $Abort(95) }
            }
            function cleanup_int192(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul


!! Move-To-Yul Diagnostics:
 warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/ParsingSoliditySig.move:35:5
   │
35 │ ╭     fun f3(_vec0: vector<vector<vector<u128>>>, _vec1: vector<address>, _vec2: vector<vector<u8>>, _vec3: vector<u8>, _vec4: vector<u8>): u128 {
36 │ │         2
37 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/ParsingSoliditySig.move:41:5
   │
41 │ ╭     fun f4(_s: String, _s1:vector <u8> ) {
42 │ │     }
   │ ╰─────^
