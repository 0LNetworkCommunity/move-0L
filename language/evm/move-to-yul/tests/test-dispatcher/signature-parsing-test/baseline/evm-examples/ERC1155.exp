/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_ERC1155" {
    code {
        codecopy(0, dataoffset("A2_ERC1155_deployed"), datasize("A2_ERC1155_deployed"))
        return(0, datasize("A2_ERC1155_deployed"))
    }
    object "A2_ERC1155_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x00fdd58e
                {
                    // balanceOf(address,uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_uint256$(4, calldatasize())
                    let ret_0 := A2_ERC1155_balanceOf(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xebd1d359
                {
                    // isApprovalForAll(address,address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_address$(4, calldatasize())
                    let ret_0 := A2_ERC1155_isApprovalForAll(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xa22cb465
                {
                    // setApprovalForAll(address,bool)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_bool$(4, calldatasize())
                    A2_ERC1155_setApprovalForAll(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_ERC1155_balanceOf(_account, _id) -> $result {
                let $t2
                // $t2 := 0
                $t2 := 0
                // return $t2
                $result := $t2
            }

            function A2_ERC1155_balanceOfBatch(_accounts, ids) -> $result {
                // return $t1
                $result := ids
            }

            function A2_ERC1155_isApprovalForAll(_account, _operator) -> $result {
                let $t2
                // $t2 := true
                $t2 := true
                // return $t2
                $result := $t2
            }

            function A2_ERC1155_safeBatchTransferFrom(_from, _to, _ids, _amounts, _data) {
                // return ()
            }

            function A2_ERC1155_safeTransferFrom(_from, _to, _id, _amount, _data) {
                // return ()
            }

            function A2_ERC1155_setApprovalForAll(_operator, _approved) {
                // return ()
            }

            function A2_ERC1155_supportsInterface(_interfaceId) -> $result {
                let $t1
                // $t1 := true
                $t1 := true
                // return $t1
                $result := $t1
            }

            function A2_ERC1155_uri() -> $result {
                let $t0, $t1
                // $t0 := [97, 98, 99]
                $t0 := (ByteArray NYI)
                // $t1 := ASCII::string($t0)
                $t1 := A1_ASCII_string($t0)
                // return $t1
                $result := $t1
            }

            function A1_ASCII_string(bytes) -> $result {
                let x, $t2, $t3, $t4, $t5, $t6, $t7
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // $t4 := 0
                        $t4 := 0
                        // $t5 := Errors::invalid_argument($t4)
                        $t5 := A1_Errors_invalid_argument($t4)
                        // abort($t5)
                        $Abort($t5)
                    }
                    case 3 {
                        // label L0
                        // $t6 := move($t1)
                        $t6 := x
                        // $t7 := Option::destroy_some<ASCII::String>($t6)
                        $t7 := A1_Option_destroy_some$A1_ASCII_String$($t6)
                        // return $t7
                        $result := $t7
                        leave
                    }
                    case 4 {
                        // $t1 := ASCII::try_string($t0)
                        x := A1_ASCII_try_string(bytes)
                        // $t2 := borrow_local($t1)
                        $t2 := $MakePtr(false, x)
                        // $t3 := Option::is_some<ASCII::String>($t2)
                        $t3 := A1_Option_is_some$A1_ASCII_String$($t2)
                        // if ($t3) goto L0 else goto L1
                        switch $t3
                        case 0  { $block := 2 }
                        default { $block := 3 }
                    }
                }
            }

            function A1_Option_is_some$A1_ASCII_String$(t) -> $result {
                let $t1, $t2, $t3
                // $t1 := borrow_field<Option::Option<#0>>.vec($t0)
                {
                    $t1 := $MakePtr($IsStoragePtr(t), $LoadU256(t))
                }
                // $t2 := Vector::is_empty<#0>($t1)
                $t2 := A1_Vector_is_empty$A1_ASCII_String$($t1)
                // $t3 := !($t2)
                $t3 := $LogicalNot($t2)
                // return $t3
                $result := $t3
            }

            function A1_ASCII_try_string(bytes) -> $result {
                let i, len, possible_byte, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17
                let $block := 3
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L6
                        // assert Le($t1, $t5)
                        // assert forall j: Range(0, $t1): ASCII::$is_valid_char(Index($t0, j))
                        // $t7 := <($t1, $t5)
                        $t7 := $Lt(i, $t5)
                        // if ($t7) goto L0 else goto L2
                        switch $t7
                        case 0  { $block := 5 }
                        default { $block := 4 }
                    }
                    case 3 {
                        // $t4 := borrow_local($t0)
                        $t4 := $MakePtr(false, bytes)
                        // $t5 := Vector::length<u8>($t4)
                        $t5 := A1_Vector_length$u8$($t4)
                        // $t6 := 0
                        $t6 := 0
                        // $t1 := $t6
                        i := $t6
                        // goto L6
                        $block := 2
                    }
                    case 4 {
                        // label L0
                        // $t8 := borrow_local($t0)
                        $t8 := $MakePtr(false, bytes)
                        // $t9 := Vector::borrow<u8>($t8, $t1)
                        $t9 := A1_Vector_borrow$u8$($t8, i)
                        // $t10 := read_ref($t9)
                        $t10 := $LoadU8($t9)
                        // $t11 := ASCII::is_valid_char($t10)
                        $t11 := A1_ASCII_is_valid_char($t10)
                        // $t12 := !($t11)
                        $t12 := $LogicalNot($t11)
                        // if ($t12) goto L3 else goto L5
                        switch $t12
                        case 0  { $block := 7 }
                        default { $block := 6 }
                    }
                    case 5 {
                        // label L2
                        // assert Eq<u64>($t1, $t5)
                        // assert forall j: Range(0, $t5): ASCII::$is_valid_char(Index($t0, j))
                        // $t15 := move($t0)
                        $t15 := bytes
                        // $t16 := pack ASCII::String($t15)
                        {
                            let $mem := $Malloc(32)
                            $MemoryStoreU256(add($mem, 0), $t15)
                            $t16 := $mem
                        }
                        // $t17 := Option::some<ASCII::String>($t16)
                        $t17 := A1_Option_some$A1_ASCII_String$($t16)
                        // return $t17
                        $result := $t17
                        leave
                    }
                    case 6 {
                        // label L3
                        // $t13 := Option::none<ASCII::String>()
                        $t13 := A1_Option_none$A1_ASCII_String$()
                        // return $t13
                        $result := $t13
                        leave
                    }
                    case 7 {
                        // label L5
                        // $t14 := 1
                        $t14 := 1
                        // $t1 := +($t1, $t14)
                        i := $AddU64(i, $t14)
                        // goto L6
                        $block := 2
                    }
                }
            }

            function A1_Option_none$A1_ASCII_String$() -> $result {
                let $t0, $t1
                // $t0 := Vector::empty<#0>()
                $t0 := A1_Vector_empty$A1_ASCII_String$()
                // $t1 := pack Option::Option<#0>($t0)
                {
                    let $mem := $Malloc(32)
                    $MemoryStoreU256(add($mem, 0), $t0)
                    $t1 := $mem
                }
                // return $t1
                $result := $t1
            }

            function A1_Option_some$A1_ASCII_String$(e) -> $result {
                let $t1, $t2
                // $t1 := Vector::singleton<#0>($t0)
                $t1 := A1_Vector_singleton$A1_ASCII_String$(e)
                // $t2 := pack Option::Option<#0>($t1)
                {
                    let $mem := $Malloc(32)
                    $MemoryStoreU256(add($mem, 0), $t1)
                    $t2 := $mem
                }
                // return $t2
                $result := $t2
            }

            function A1_Vector_singleton$A1_ASCII_String$(e) -> $result {
                let v, $t2, $t3
                // $t1 := Vector::empty<#0>()
                v := A1_Vector_empty$A1_ASCII_String$()
                // $t2 := borrow_local($t1)
                $t2 := $MakePtr(false, v)
                // Vector::push_back<#0>($t2, $t0)
                A1_Vector_push_back$A1_ASCII_String$($t2, e)
                // $t3 := move($t1)
                $t3 := v
                // return $t3
                $result := $t3
            }

            function A1_ASCII_is_valid_char(byte) -> $result {
                let $t1, $t2
                // $t1 := 127
                $t1 := 127
                // $t2 := <=($t0, $t1)
                $t2 := $LtEq(byte, $t1)
                // return $t2
                $result := $t2
            }

            function A1_Option_destroy_some$A1_ASCII_String$(t) -> $result {
                let elem, vec, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // $t5 := 1
                        $t5 := 1
                        // $t6 := Errors::invalid_argument($t5)
                        $t6 := A1_Errors_invalid_argument($t5)
                        // abort($t6)
                        $Abort($t6)
                    }
                    case 3 {
                        // label L0
                        // $t7 := move($t0)
                        $t7 := t
                        // $t2 := unpack Option::Option<#0>($t7)
                        vec := $MemoryLoadU256(add($t7, 0))
                        $Free($t7, 32)
                        // $t8 := borrow_local($t2)
                        $t8 := $MakePtr(false, vec)
                        // $t9 := Vector::pop_back<#0>($t8)
                        $t9 := A1_Vector_pop_back$A1_ASCII_String$($t8)
                        // $t10 := move($t2)
                        $t10 := vec
                        // Vector::destroy_empty<#0>($t10)
                        A1_Vector_destroy_empty$A1_ASCII_String$($t10)
                        // return $t9
                        $result := $t9
                        leave
                    }
                    case 4 {
                        // $t3 := borrow_local($t0)
                        $t3 := $MakePtr(false, t)
                        // $t4 := Option::is_some<#0>($t3)
                        $t4 := A1_Option_is_some$A1_ASCII_String$($t3)
                        // if ($t4) goto L0 else goto L1
                        switch $t4
                        case 0  { $block := 2 }
                        default { $block := 3 }
                    }
                }
            }

            function A1_Errors_invalid_argument(reason) -> $result {
                let $t1, $t2
                // $t1 := 7
                $t1 := 7
                // $t2 := Errors::make($t1, $t0)
                $t2 := A1_Errors_make($t1, reason)
                // return $t2
                $result := $t2
            }

            function A1_Errors_make(category, reason) -> $result {
                let $t2, $t3, $t4, $t5
                // $t2 := (u64)($t0)
                $t2 := $CastU64(category)
                // $t3 := 8
                $t3 := 8
                // $t4 := <<($t1, $t3)
                $t4 := $ShlU64(reason, $t3)
                // $t5 := +($t2, $t4)
                $t5 := $AddU64($t2, $t4)
                // return $t5
                $result := $t5
            }

            function abi_encode_tuple_(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_decode_tuple_$address_bool$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_bool(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_bool(offset, end) -> value {
                value := calldataload(offset)
                validator_bool(value)
            }
            function validator_bool(value) {
                if iszero(eq(value, cleanup_bool(value))) { $Abort(95) }
            }
            function cleanup_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_decode_address(offset, end) -> value {
                value := calldataload(offset)
                validator_address(value)
            }
            function validator_address(value) {
                if iszero(eq(value, cleanup_address(value))) { $Abort(95) }
            }
            function cleanup_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_encode_tuple_$bool$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_bool(value_0, add(headStart, 0))
            }
            function abi_encode_bool(value, pos) {
                mstore(pos, cleanup_bool(value))
            }
            function abi_decode_tuple_$address_address$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple_$uint256$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint256(value_0, add(headStart, 0))
            }
            function abi_encode_uint256(value, pos) {
                mstore(pos, cleanup_uint256(value))
            }
            function cleanup_uint256(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$address_uint256$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint256(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint256(offset, end) -> value {
                value := calldataload(offset)
                validator_uint256(value)
            }
            function validator_uint256(value) {
                if iszero(eq(value, cleanup_uint256(value))) { $Abort(95) }
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if $LogicalNot(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, group)
              key := keccak256(32, 36)
            }
            function $LoadU8(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU8(offs)
              }
              default {
                val := $StorageLoadU8(offs)
              }
            }
            function $MemoryLoadU8(offs) -> val {
              val := $MemoryLoadBytes(offs, 1)
            }
            function $StorageLoadU8(offs) -> val {
              val := $StorageLoadBytes(offs, 1)
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $StorageLoadU256(offs) -> val {
              val := $StorageLoadBytes(offs, 32)
            }
            function $MemoryStoreU256(offs, val) {
              $MemoryStoreBytes(offs, 32, val)
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $ShlU64(x, y) -> r {
                r := and(shl(y, x), 0xffffffffffffffff)
            }
            function $Lt(x, y) -> r {
                r := lt(x, y)
            }
            function $LtEq(x, y) -> r {
                r := or(lt(x, y), eq(x, y))
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
            function $CastU64(x) -> r {
                if gt(x, 0xffffffffffffffff) { $AbortBuiltin() }
                r := x
            }
        }
    }
}


!! Move-To-Yul Diagnostics:
 warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/evm-examples/ERC1155.move:22:5
   │
22 │ ╭     public fun balanceOfBatch(_accounts: vector<address>, ids: vector<U256>): vector<U256> {
23 │ │         ids
24 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/evm-examples/ERC1155.move:44:5
   │
44 │ ╭     public fun safeBatchTransferFrom(_from: address, _to: address, _ids: vector<U256>, _amounts: vector<U256>, _data: vector<u8>) {
45 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/evm-examples/ERC1155.move:39:5
   │
39 │ ╭     public fun safeTransferFrom(_from: address, _to: address, _id: U256, _amount: U256, _data: vector<u8>) {
40 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/evm-examples/ERC1155.move:49:5
   │
49 │ ╭     public fun supportsInterface(_interfaceId: vector<u8>): bool {
50 │ │         true
51 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/evm-examples/ERC1155.move:10:5
   │
10 │ ╭     public fun uri(): String {
11 │ │         Std::ASCII::string(b"abc") // TODO: this leads to compilation errors such as "native function `Vector::is_empty` not implemented"
12 │ │     }
   │ ╰─────^

error: native function `Vector::is_empty` not implemented
  ┌─ <unknown>:1:1
  │
1 │ <unknown>
  │ ^^^^^^^^^

error: native function `Vector::empty` not implemented
  ┌─ <unknown>:1:1
  │
1 │ <unknown>
  │ ^^^^^^^^^

error: native function `Vector::push_back` not implemented
  ┌─ <unknown>:1:1
  │
1 │ <unknown>
  │ ^^^^^^^^^

error: native function `Vector::borrow` not implemented
  ┌─ <unknown>:1:1
  │
1 │ <unknown>
  │ ^^^^^^^^^

error: native function `Vector::length` not implemented
  ┌─ <unknown>:1:1
  │
1 │ <unknown>
  │ ^^^^^^^^^

error: native function `Vector::destroy_empty` not implemented
  ┌─ <unknown>:1:1
  │
1 │ <unknown>
  │ ^^^^^^^^^

error: native function `Vector::pop_back` not implemented
  ┌─ <unknown>:1:1
  │
1 │ <unknown>
  │ ^^^^^^^^^
