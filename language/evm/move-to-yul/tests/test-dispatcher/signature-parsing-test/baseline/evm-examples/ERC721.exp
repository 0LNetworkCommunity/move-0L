/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_ERC721" {
    code {
        codecopy(0, dataoffset("A2_ERC721_deployed"), datasize("A2_ERC721_deployed"))
        return(0, datasize("A2_ERC721_deployed"))
    }
    object "A2_ERC721_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x095ea7b3
                {
                    // approve(address,uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_uint256$(4, calldatasize())
                    A2_ERC721_approve(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x70a08231
                {
                    // balanceOf(address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$address$(4, calldatasize())
                    let ret_0 := A2_ERC721_balanceOf(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x081812fc
                {
                    // getApproved(uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint256$(4, calldatasize())
                    let ret_0 := A2_ERC721_getApproved(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$address$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xebd1d359
                {
                    // isApprovalForAll(address,address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_address$(4, calldatasize())
                    let ret_0 := A2_ERC721_isApprovalForAll(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x6352211e
                {
                    // ownerOf(uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint256$(4, calldatasize())
                    let ret_0 := A2_ERC721_ownerOf(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$address$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x42842e0e
                {
                    // safeTransferFrom(address,address,uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1, param_2 := abi_decode_tuple_$address_address_uint256$(4, calldatasize())
                    A2_ERC721_safeTransferFrom(param_0, param_1, param_2)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xa22cb465
                {
                    // setApprovalForAll(address,bool)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_bool$(4, calldatasize())
                    A2_ERC721_setApprovalForAll(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x23b872dd
                {
                    // transferFrom(address,address,uint256)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1, param_2 := abi_decode_tuple_$address_address_uint256$(4, calldatasize())
                    A2_ERC721_transferFrom(param_0, param_1, param_2)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_ERC721_approve(_approved, _tokenId) {
                // return ()
            }

            function A2_ERC721_balanceOf(_owner) -> $result {
                let $t1
                // $t1 := 0
                $t1 := 0
                // return $t1
                $result := $t1
            }

            function A2_ERC721_getApproved(_tokenId) -> $result {
                let $t1
                // $t1 := 0x1
                $t1 := 0x1
                // return $t1
                $result := $t1
            }

            function A2_ERC721_isApprovalForAll(_account, _operator) -> $result {
                let $t2
                // $t2 := true
                $t2 := true
                // return $t2
                $result := $t2
            }

            function A2_ERC721_ownerOf(_tokenId) -> $result {
                let $t1
                // $t1 := 0x1
                $t1 := 0x1
                // return $t1
                $result := $t1
            }

            function A2_ERC721_safeTransferFrom(from, to, tokenId) {
                let $t3
                // $t3 := []
                $t3 := (ByteArray NYI)
                // ERC721::safeTransferFrom_with_data($t0, $t1, $t2, $t3)
                A2_ERC721_safeTransferFrom_with_data(from, to, tokenId, $t3)
                // return ()
            }

            function A2_ERC721_safeTransferFrom_with_data(_from, _to, _tokenId, _data) {
                // return ()
            }

            function A2_ERC721_setApprovalForAll(_operator, _approved) {
                // return ()
            }

            function A2_ERC721_supportsInterface(_interfaceId) -> $result {
                let $t1
                // $t1 := true
                $t1 := true
                // return $t1
                $result := $t1
            }

            function A2_ERC721_transferFrom(_from, _to, _tokenId) {
                // return ()
            }

            function abi_encode_tuple_(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_decode_tuple_$address_address_uint256$(headStart, dataEnd) -> value_0, value_1, value_2 {
                if slt(sub(dataEnd, headStart), 96) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value_2 := abi_decode_uint256(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint256(offset, end) -> value {
                value := calldataload(offset)
                validator_uint256(value)
            }
            function validator_uint256(value) {
                if iszero(eq(value, cleanup_uint256(value))) { $Abort(95) }
            }
            function cleanup_uint256(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_address(offset, end) -> value {
                value := calldataload(offset)
                validator_address(value)
            }
            function validator_address(value) {
                if iszero(eq(value, cleanup_address(value))) { $Abort(95) }
            }
            function cleanup_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$address_bool$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_bool(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_bool(offset, end) -> value {
                value := calldataload(offset)
                validator_bool(value)
            }
            function validator_bool(value) {
                if iszero(eq(value, cleanup_bool(value))) { $Abort(95) }
            }
            function cleanup_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_encode_tuple_$address$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_address(value_0, add(headStart, 0))
            }
            function abi_encode_address(value, pos) {
                mstore(pos, cleanup_address(value))
            }
            function abi_decode_tuple_$uint256$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint256(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple_$bool$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_bool(value_0, add(headStart, 0))
            }
            function abi_encode_bool(value, pos) {
                mstore(pos, cleanup_bool(value))
            }
            function abi_decode_tuple_$address_address$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple_$uint256$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint256(value_0, add(headStart, 0))
            }
            function abi_encode_uint256(value, pos) {
                mstore(pos, cleanup_uint256(value))
            }
            function abi_decode_tuple_$address$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_tuple_$address_uint256$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint256(add(headStart, offset), dataEnd)
                }
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Errors compiling Yul

Warning: Yul is still experimental. Please use the output with care.
Error: Literal or identifier expected.
   --> <stdin>:164:24:
    |
164 |                 $t3 := (ByteArray NYI)
    |                        ^

Error: Expected keyword "data" or "object" or "}".
   --> <stdin>:164:24:
    |
164 |                 $t3 := (ByteArray NYI)
    |                        ^



!! Move-To-Yul Diagnostics:
 warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/evm-examples/ERC721.move:21:5
   │
21 │ ╭     public fun safeTransferFrom_with_data(_from: address, _to: address, _tokenId: U256, _data: vector<u8>) {
22 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/evm-examples/ERC721.move:61:5
   │
61 │ ╭     public fun supportsInterface(_interfaceId: vector<u8>): bool {
62 │ │         true
63 │ │     }
   │ ╰─────^
