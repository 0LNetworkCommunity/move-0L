/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x447951a9
                {
                    // primitive_calldata()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_primitive_calldata()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint128$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x9f485227
                {
                    // primitive_memory(uint128)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint128$(4, calldatasize())
                    A2_M_primitive_memory(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_bytes_calldata(_v) -> $result {
                let $t1
                // $t1 := 0
                $t1 := 0
                // return $t1
                $result := $t1
            }

            function A2_M_primitive_calldata() -> $result {
                let $t0
                // $t0 := 0
                $t0 := 0
                // return $t0
                $result := $t0
            }

            function A2_M_primitive_memory(_x) {
                // return ()
            }

            function abi_encode_tuple_(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_decode_tuple_$uint128$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint128(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint128(offset, end) -> value {
                value := calldataload(offset)
                validator_uint128(value)
            }
            function validator_uint128(value) {
                if iszero(eq(value, cleanup_uint128(value))) { $Abort(95) }
            }
            function cleanup_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function abi_encode_tuple_$uint128$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint128(value_0, add(headStart, 0))
            }
            function abi_encode_uint128(value, pos) {
                mstore(pos, cleanup_uint128(value))
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Move-To-Yul Diagnostics:
 error: calldata is not supported yet
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IllegalDataLocation.move:14:5
   │
14 │ ╭     fun bytes_calldata(_v: vector<u8>): u128 {
15 │ │         0
16 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IllegalDataLocation.move:14:5
   │
14 │ ╭     fun bytes_calldata(_v: vector<u8>): u128 {
15 │ │         0
16 │ │     }
   │ ╰─────^

error: calldata is not supported yet
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IllegalDataLocation.move:9:5
   │
 9 │ ╭     fun primitive_calldata(): u128 {
10 │ │         0
11 │ │     }
   │ ╰─────^

error: data location can only be specified for array or struct types
  ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IllegalDataLocation.move:5:5
  │
5 │ ╭     fun primitive_memory(_x:u128) {
6 │ │     }
  │ ╰─────^
