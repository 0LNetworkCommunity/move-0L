/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xe4e78e7f
                {
                    // fun_address_u160(address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$address$(4, calldatasize())
                    A2_M_fun_address_u160(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xcbf7c360
                {
                    // fun_u128()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_fun_u128()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint128$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x8d0b1090
                {
                    // fun_u128_address(uint128)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint128$(4, calldatasize())
                    A2_M_fun_u128_address(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xa9d905d0
                {
                    // fun_u128_fixed(uint128)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint128$(4, calldatasize())
                    A2_M_fun_u128_fixed(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x770a450e
                {
                    // fun_u128_ufixed(uint128)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint128$(4, calldatasize())
                    A2_M_fun_u128_ufixed(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xc0d24f28
                {
                    // fun_u64(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64$(4, calldatasize())
                    A2_M_fun_u64(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x92678e35
                {
                    // fun_u8(uint8)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint8$(4, calldatasize())
                    A2_M_fun_u8(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x998281f6
                {
                    // fun_u8_bool(uint8)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint8$(4, calldatasize())
                    A2_M_fun_u8_bool(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xf1a3a9ec
                {
                    // len_ret_diff()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_len_ret_diff()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint128$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xfdcc968a
                {
                    // len_typ_diff(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64$(4, calldatasize())
                    let ret_0 := A2_M_len_typ_diff(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_fun_address_u160(_a) {
                // return ()
            }

            function A2_M_fun_u128() -> $result {
                let $t0
                // $t0 := 0
                $t0 := 0
                // return $t0
                $result := $t0
            }

            function A2_M_fun_u128_address(_a) {
                // return ()
            }

            function A2_M_fun_u128_fixed(_a) {
                // return ()
            }

            function A2_M_fun_u128_ufixed(_a) {
                // return ()
            }

            function A2_M_fun_u64(_x) {
                // return ()
            }

            function A2_M_fun_u8(_x) {
                // return ()
            }

            function A2_M_fun_u8_bool(_b) {
                // return ()
            }

            function A2_M_fun_vec_u128_bytes(_vec0) -> $result {
                let $t1
                // $t1 := 2
                $t1 := 2
                // return $t1
                $result := $t1
            }

            function A2_M_fun_vec_u128_str(_vec0) -> $result {
                let $t1
                // $t1 := 2
                $t1 := 2
                // return $t1
                $result := $t1
            }

            function A2_M_fun_vec_u64(_vec0) -> $result {
                let $t1
                // $t1 := 2
                $t1 := 2
                // return $t1
                $result := $t1
            }

            function A2_M_fun_vec_u64_int72_dynamic(_vec0) -> $result {
                let $t1
                // $t1 := 2
                $t1 := 2
                // return $t1
                $result := $t1
            }

            function A2_M_fun_vec_u64_int72_static(_vec0) -> $result {
                let $t1
                // $t1 := 2
                $t1 := 2
                // return $t1
                $result := $t1
            }

            function A2_M_len_ret_diff() -> $result {
                let $t0
                // $t0 := 0
                $t0 := 0
                // return $t0
                $result := $t0
            }

            function A2_M_len_typ_diff(x) -> $result {
                // return $t0
                $result := x
            }

            function abi_encode_tuple_$uint64$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint64(value_0, add(headStart, 0))
            }
            function abi_encode_uint64(value, pos) {
                mstore(pos, cleanup_uint64(value))
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_tuple_$uint64$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_uint64(value)
            }
            function validator_uint64(value) {
                if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
            }
            function abi_encode_tuple_$uint128$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint128(value_0, add(headStart, 0))
            }
            function abi_encode_uint128(value, pos) {
                mstore(pos, cleanup_uint128(value))
            }
            function cleanup_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function abi_encode_tuple_(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_decode_tuple_$uint8$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint8(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint8(offset, end) -> value {
                value := calldataload(offset)
                validator_uint8(value)
            }
            function validator_uint8(value) {
                if iszero(eq(value, cleanup_uint8(value))) { $Abort(95) }
            }
            function cleanup_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_decode_tuple_$uint128$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint128(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint128(offset, end) -> value {
                value := calldataload(offset)
                validator_uint128(value)
            }
            function validator_uint128(value) {
                if iszero(eq(value, cleanup_uint128(value))) { $Abort(95) }
            }
            function abi_decode_tuple_$address$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_address(offset, end) -> value {
                value := calldataload(offset)
                validator_address(value)
            }
            function validator_address(value) {
                if iszero(eq(value, cleanup_address(value))) { $Abort(95) }
            }
            function cleanup_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Move-To-Yul Diagnostics:
 error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:40:5
   │
40 │ ╭     fun fun_address_u160(_a: address) {
41 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:27:5
   │
27 │ ╭     fun fun_u128(): u128 {
28 │ │         0
29 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:36:5
   │
36 │ ╭     fun fun_u128_address(_a: u128) {
37 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:48:5
   │
48 │ ╭     fun fun_u128_fixed(_a: u128) {
49 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:44:5
   │
44 │ ╭     fun fun_u128_ufixed(_a: u128) {
45 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:23:5
   │
23 │ ╭     fun fun_u64(_x:u64) {
24 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:19:5
   │
19 │ ╭     fun fun_u8(_x:u8) {
20 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:32:5
   │
32 │ ╭     fun fun_u8_bool(_b: u8) {
33 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:61:5
   │
61 │ ╭     fun fun_vec_u128_bytes(_vec0: vector<u128>): u128 {
62 │ │         2
63 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:61:5
   │
61 │ ╭     fun fun_vec_u128_bytes(_vec0: vector<u128>): u128 {
62 │ │         2
63 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:54:5
   │
54 │ ╭     fun fun_vec_u128_str(_vec0: vector<u128>): u128 {
55 │ │         2
56 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:54:5
   │
54 │ ╭     fun fun_vec_u128_str(_vec0: vector<u128>): u128 {
55 │ │         2
56 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:68:5
   │
68 │ ╭     fun fun_vec_u64(_vec0: vector<u64>): u128 {
69 │ │         2
70 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:68:5
   │
68 │ ╭     fun fun_vec_u64(_vec0: vector<u64>): u128 {
69 │ │         2
70 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:82:5
   │
82 │ ╭     fun fun_vec_u64_int72_dynamic(_vec0: vector<u64>): u128 {
83 │ │         2
84 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:82:5
   │
82 │ ╭     fun fun_vec_u64_int72_dynamic(_vec0: vector<u64>): u128 {
83 │ │         2
84 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:75:5
   │
75 │ ╭     fun fun_vec_u64_int72_static(_vec0: vector<u64>): u128 {
76 │ │         2
77 │ │     }
   │ ╰─────^

warning: cannot dispatch this function because of unsupported parameter types
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:75:5
   │
75 │ ╭     fun fun_vec_u64_int72_static(_vec0: vector<u64>): u128 {
76 │ │         2
77 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:12:5
   │
12 │ ╭     fun len_ret_diff(): u128 {
13 │ │         0
14 │ │     }
   │ ╰─────^

error: solidity signature is not compatible with the move signature
  ┌─ tests/test-dispatcher/signature-parsing-test/baseline/parsing_failure/IncompatibileType.move:7:5
  │
7 │ ╭     fun len_typ_diff(x: u64): u64 {
8 │ │         x
9 │ │     }
  │ ╰─────^
