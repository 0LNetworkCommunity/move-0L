/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/Arithm.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))

            // Dummy calls to reference callables for Yul optimizer
            let $dummy0, $dummy1 := A2_M_add_two_number(sload(100), sload(101))
            sstore(200, $dummy0)
            sstore(201, $dummy1)
            let $dummy2, $dummy3 := A2_M_arithmetic_ops(sload(102))
            sstore(202, $dummy2)
            sstore(203, $dummy3)
            let $dummy4, $dummy5 := A2_M_bool_ops(sload(104), sload(105))
            sstore(204, $dummy4)
            sstore(205, $dummy5)
            let $dummy6, $dummy7 := A2_M_div(sload(106), sload(107))
            sstore(206, $dummy6)
            sstore(207, $dummy7)
            let $dummy8 := A2_M_div_by_zero()
            sstore(208, $dummy8)
            let $dummy9 := A2_M_div_by_zero_u64(sload(109), sload(110))
            sstore(209, $dummy9)
            let $dummy10 := A2_M_div_by_zero_u64_incorrect(sload(110), sload(111))
            sstore(210, $dummy10)
            let $dummy11 := A2_M_f(sload(111))
            sstore(211, $dummy11)
            let $dummy12 := A2_M_g(sload(112))
            sstore(212, $dummy12)
            let $dummy13 := A2_M_h(sload(113))
            sstore(213, $dummy13)
            let $dummy14 := A2_M_multiple_ops(sload(114), sload(115), sload(116))
            sstore(214, $dummy14)
            let $dummy15 := A2_M_overflow_u128_add(sload(115), sload(116))
            sstore(215, $dummy15)
            let $dummy16 := A2_M_overflow_u128_add_incorrect(sload(116), sload(117))
            sstore(216, $dummy16)
            let $dummy17 := A2_M_overflow_u128_mul(sload(117), sload(118))
            sstore(217, $dummy17)
            let $dummy18 := A2_M_overflow_u128_mul_incorrect(sload(118), sload(119))
            sstore(218, $dummy18)
            let $dummy19 := A2_M_overflow_u64_add(sload(119), sload(120))
            sstore(219, $dummy19)
            let $dummy20 := A2_M_overflow_u64_add_incorrect(sload(120), sload(121))
            sstore(220, $dummy20)
            let $dummy21 := A2_M_overflow_u64_mul(sload(121), sload(122))
            sstore(221, $dummy21)
            let $dummy22 := A2_M_overflow_u64_mul_incorrect(sload(122), sload(123))
            sstore(222, $dummy22)
            let $dummy23 := A2_M_overflow_u8_add(sload(123), sload(124))
            sstore(223, $dummy23)
            let $dummy24 := A2_M_overflow_u8_add_incorrect(sload(124), sload(125))
            sstore(224, $dummy24)
            let $dummy25 := A2_M_overflow_u8_mul(sload(125), sload(126))
            sstore(225, $dummy25)
            let $dummy26 := A2_M_overflow_u8_mul_incorrect(sload(126), sload(127))
            sstore(226, $dummy26)
            let $dummy27 := A2_M_underflow()
            sstore(227, $dummy27)

            function A2_M_add_two_number(x, y) -> $result0, $result1 {
                let res, z, $t4, $t5
                // $t4 := +($t0, $t1)
                /// @src 2:309:310
                $t4 := $AddU64(x, y)
                // $t5 := 3
                /// @src 2:329:330
                $t5 := 3
                // return ($t5, $t4)
                /// @src 2:334:342
                $result0 := $t5
                $result1 := $t4
            }

            function A2_M_arithmetic_ops(a) -> $result0, $result1 {
                let c, $t2, $t3, $t4, $t5
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L0
                        // $t5 := 42
                        /// @src 2:1350:1352
                        $t5 := 42
                        // abort($t5)
                        /// @src 2:1344:1352
                        $Abort($t5)
                    }
                    case 3 {
                        // label L2
                        // return ($t2, $t0)
                        /// @src 2:1362:1368
                        $result0 := $t2
                        $result1 := a
                        leave
                    }
                    case 4 {
                        // $t2 := 2
                        /// @src 2:1299:1322
                        $t2 := 2
                        // $t3 := 2
                        /// @src 2:1341:1342
                        $t3 := 2
                        // $t4 := !=($t2, $t3)
                        /// @src 2:1338:1340
                        $t4 := $Neq($t2, $t3)
                        // if ($t4) goto L0 else goto L2
                        /// @src 2:1332:1352
                        switch $t4
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                }
            }

            function A2_M_bool_ops(a, b) -> $result0, $result1 {
                let tmp_$2, tmp_$3, c, d, $t6, $t7, $t8, $t9, $t10, $t11, $t12
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L0
                        // $t2 := >=($t0, $t1)
                        /// @src 2:978:980
                        tmp_$2 := $GtEq(a, b)
                        // goto L3
                        /// @src 2:967:982
                        $block := 5
                    }
                    case 3 {
                        // label L2
                        // $t7 := false
                        /// @src 2:967:982
                        $t7 := false
                        // $t2 := $t7
                        /// @src 2:967:982
                        tmp_$2 := $t7
                        // goto L3
                        /// @src 2:967:982
                        $block := 5
                    }
                    case 4 {
                        // $t6 := >($t0, $t1)
                        /// @src 2:969:970
                        $t6 := $Gt(a, b)
                        // if ($t6) goto L0 else goto L2
                        /// @src 2:967:982
                        switch $t6
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L3
                        // $t8 := <($t0, $t1)
                        /// @src 2:998:999
                        $t8 := $Lt(a, b)
                        // if ($t8) goto L4 else goto L6
                        /// @src 2:996:1011
                        switch $t8
                        case 0  { $block := 7 }
                        default { $block := 6 }
                    }
                    case 6 {
                        // label L4
                        // $t9 := true
                        /// @src 2:996:1011
                        $t9 := true
                        // $t3 := $t9
                        /// @src 2:996:1011
                        tmp_$3 := $t9
                        // goto L7
                        /// @src 2:996:1011
                        $block := 8
                    }
                    case 7 {
                        // label L6
                        // $t3 := <=($t0, $t1)
                        /// @src 2:1007:1009
                        tmp_$3 := $LtEq(a, b)
                        // goto L7
                        /// @src 2:996:1011
                        $block := 8
                    }
                    case 8 {
                        // label L7
                        // $t10 := !=($t2, $t3)
                        /// @src 2:1029:1031
                        $t10 := $Neq(tmp_$2, tmp_$3)
                        // $t11 := !($t10)
                        /// @src 2:1025:1026
                        $t11 := $LogicalNot($t10)
                        // if ($t11) goto L8 else goto L10
                        /// @src 2:1021:1044
                        switch $t11
                        case 0  { $block := 10 }
                        default { $block := 9 }
                    }
                    case 9 {
                        // label L8
                        // $t12 := 42
                        /// @src 2:1042:1044
                        $t12 := 42
                        // abort($t12)
                        /// @src 2:1036:1044
                        $Abort($t12)
                    }
                    case 10 {
                        // label L10
                        // return ($t2, $t3)
                        /// @src 2:1054:1060
                        $result0 := tmp_$2
                        $result1 := tmp_$3
                        leave
                    }
                }
            }

            function A2_M_div(x, y) -> $result0, $result1 {
                let $t2, $t3
                // $t2 := /($t0, $t1)
                /// @src 2:536:537
                $t2 := $Div(x, y)
                // $t3 := %($t0, $t1)
                /// @src 2:543:544
                $t3 := $Mod(x, y)
                // return ($t2, $t3)
                /// @src 2:533:547
                $result0 := $t2
                $result1 := $t3
            }

            function A2_M_div_by_zero() -> $result {
                let x, $t1, $t2, $t3
                // $t1 := 1
                /// @src 2:2393:2394
                $t1 := 1
                // $t2 := 0
                /// @src 2:2382:2383
                $t2 := 0
                // $t3 := /($t1, $t2)
                /// @src 2:2395:2396
                $t3 := $Div($t1, $t2)
                // return $t3
                /// @src 2:2393:2398
                $result := $t3
            }

            function A2_M_div_by_zero_u64(x, y) -> $result {
                let $t2
                // $t2 := /($t0, $t1)
                /// @src 2:2685:2686
                $t2 := $Div(x, y)
                // return $t2
                /// @src 2:2683:2688
                $result := $t2
            }

            function A2_M_div_by_zero_u64_incorrect(x, y) -> $result {
                let $t2
                // $t2 := /($t0, $t1)
                /// @src 2:2533:2534
                $t2 := $Div(x, y)
                // return $t2
                /// @src 2:2531:2536
                $result := $t2
            }

            function A2_M_f(x) -> $result {
                let $t1, $t2
                // $t1 := 1
                /// @src 2:1544:1545
                $t1 := 1
                // $t2 := +($t0, $t1)
                /// @src 2:1543:1544
                $t2 := $AddU64(x, $t1)
                // return $t2
                /// @src 2:1542:1545
                $result := $t2
            }

            function A2_M_g(x) -> $result {
                let $t1, $t2
                // $t1 := 2
                /// @src 2:1690:1691
                $t1 := 2
                // $t2 := +($t0, $t1)
                /// @src 2:1689:1690
                $t2 := $AddU64(x, $t1)
                // return $t2
                /// @src 2:1688:1691
                $result := $t2
            }

            function A2_M_h(b) -> $result {
                let tmp_$1, tmp_$2, x, y, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L0
                        // $t4 := M::f($t5)
                        /// @src 2:1887:1891
                        y := A2_M_f($t5)
                        // goto L3
                        /// @src 2:1885:1891
                        $block := 5
                    }
                    case 3 {
                        // label L2
                        // $t4 := M::g($t5)
                        /// @src 2:1899:1903
                        y := A2_M_g($t5)
                        // goto L3
                        /// @src 2:1917:1918
                        $block := 5
                    }
                    case 4 {
                        // $t5 := 3
                        /// @src 2:1847:1848
                        $t5 := 3
                        // if ($t0) goto L0 else goto L2
                        /// @src 2:1878:1903
                        switch b
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L3
                        // if ($t0) goto L4 else goto L6
                        /// @src 2:1917:1928
                        switch b
                        case 0  { $block := 7 }
                        default { $block := 6 }
                    }
                    case 6 {
                        // label L4
                        // $t6 := 4
                        /// @src 2:1927:1928
                        $t6 := 4
                        // $t1 := !=($t4, $t6)
                        /// @src 2:1924:1926
                        tmp_$1 := $Neq(y, $t6)
                        // goto L7
                        /// @src 2:1917:1928
                        $block := 8
                    }
                    case 7 {
                        // label L6
                        // $t7 := false
                        /// @src 2:1917:1928
                        $t7 := false
                        // $t1 := $t7
                        /// @src 2:1917:1928
                        tmp_$1 := $t7
                        // goto L7
                        /// @src 2:1917:1928
                        $block := 8
                    }
                    case 8 {
                        // label L7
                        // if ($t1) goto L8 else goto L10
                        /// @src 2:1913:1937
                        switch tmp_$1
                        case 0  { $block := 10 }
                        default { $block := 9 }
                    }
                    case 9 {
                        // label L8
                        // $t8 := 4
                        /// @src 2:1936:1937
                        $t8 := 4
                        // abort($t8)
                        /// @src 2:1930:1937
                        $Abort($t8)
                    }
                    case 10 {
                        // label L10
                        // $t9 := !($t0)
                        /// @src 2:1951:1952
                        $t9 := $LogicalNot(b)
                        // if ($t9) goto L11 else goto L13
                        /// @src 2:1951:1963
                        switch $t9
                        case 0  { $block := 12 }
                        default { $block := 11 }
                    }
                    case 11 {
                        // label L11
                        // $t10 := 5
                        /// @src 2:1962:1963
                        $t10 := 5
                        // $t2 := !=($t4, $t10)
                        /// @src 2:1959:1961
                        tmp_$2 := $Neq(y, $t10)
                        // goto L14
                        /// @src 2:1951:1963
                        $block := 13
                    }
                    case 12 {
                        // label L13
                        // $t11 := false
                        /// @src 2:1951:1963
                        $t11 := false
                        // $t2 := $t11
                        /// @src 2:1951:1963
                        tmp_$2 := $t11
                        // goto L14
                        /// @src 2:1951:1963
                        $block := 13
                    }
                    case 13 {
                        // label L14
                        // if ($t2) goto L15 else goto L17
                        /// @src 2:1947:1972
                        switch tmp_$2
                        case 0  { $block := 15 }
                        default { $block := 14 }
                    }
                    case 14 {
                        // label L15
                        // $t12 := 5
                        /// @src 2:1971:1972
                        $t12 := 5
                        // abort($t12)
                        /// @src 2:1965:1972
                        $Abort($t12)
                    }
                    case 15 {
                        // label L17
                        // return $t4
                        /// @src 2:1982:1983
                        $result := y
                        leave
                    }
                }
            }

            function A2_M_multiple_ops(x, y, z) -> $result {
                let $t3, $t4
                // $t3 := *($t1, $t2)
                /// @src 2:762:763
                $t3 := $MulU64(y, z)
                // $t4 := +($t0, $t3)
                /// @src 2:758:759
                $t4 := $AddU64(x, $t3)
                // return $t4
                /// @src 2:756:765
                $result := $t4
            }

            function A2_M_overflow_u128_add(x, y) -> $result {
                let $t2
                // $t2 := +($t0, $t1)
                /// @src 2:3810:3811
                $t2 := $AddU128(x, y)
                // return $t2
                /// @src 2:3808:3813
                $result := $t2
            }

            function A2_M_overflow_u128_add_incorrect(x, y) -> $result {
                let $t2
                // $t2 := +($t0, $t1)
                /// @src 2:3634:3635
                $t2 := $AddU128(x, y)
                // return $t2
                /// @src 2:3632:3637
                $result := $t2
            }

            function A2_M_overflow_u128_mul(x, y) -> $result {
                let $t2
                // $t2 := *($t0, $t1)
                /// @src 2:4933:4934
                $t2 := $MulU128(x, y)
                // return $t2
                /// @src 2:4931:4936
                $result := $t2
            }

            function A2_M_overflow_u128_mul_incorrect(x, y) -> $result {
                let $t2
                // $t2 := *($t0, $t1)
                /// @src 2:4774:4775
                $t2 := $MulU128(x, y)
                // return $t2
                /// @src 2:4772:4777
                $result := $t2
            }

            function A2_M_overflow_u64_add(x, y) -> $result {
                let $t2
                // $t2 := +($t0, $t1)
                /// @src 2:3450:3451
                $t2 := $AddU64(x, y)
                // return $t2
                /// @src 2:3448:3453
                $result := $t2
            }

            function A2_M_overflow_u64_add_incorrect(x, y) -> $result {
                let $t2
                // $t2 := +($t0, $t1)
                /// @src 2:3279:3280
                $t2 := $AddU64(x, y)
                // return $t2
                /// @src 2:3277:3282
                $result := $t2
            }

            function A2_M_overflow_u64_mul(x, y) -> $result {
                let $t2
                // $t2 := *($t0, $t1)
                /// @src 2:4590:4591
                $t2 := $MulU64(x, y)
                // return $t2
                /// @src 2:4588:4593
                $result := $t2
            }

            function A2_M_overflow_u64_mul_incorrect(x, y) -> $result {
                let $t2
                // $t2 := *($t0, $t1)
                /// @src 2:4436:4437
                $t2 := $MulU64(x, y)
                // return $t2
                /// @src 2:4434:4439
                $result := $t2
            }

            function A2_M_overflow_u8_add(x, y) -> $result {
                let $t2
                // $t2 := +($t0, $t1)
                /// @src 2:3101:3102
                $t2 := $AddU8(x, y)
                // return $t2
                /// @src 2:3099:3104
                $result := $t2
            }

            function A2_M_overflow_u8_add_incorrect(x, y) -> $result {
                let $t2
                // $t2 := +($t0, $t1)
                /// @src 2:2935:2936
                $t2 := $AddU8(x, y)
                // return $t2
                /// @src 2:2933:2938
                $result := $t2
            }

            function A2_M_overflow_u8_mul(x, y) -> $result {
                let $t2
                // $t2 := *($t0, $t1)
                /// @src 2:4258:4259
                $t2 := $MulU8(x, y)
                // return $t2
                /// @src 2:4256:4261
                $result := $t2
            }

            function A2_M_overflow_u8_mul_incorrect(x, y) -> $result {
                let $t2
                // $t2 := *($t0, $t1)
                /// @src 2:4092:4093
                $t2 := $MulU8(x, y)
                // return $t2
                /// @src 2:4090:4095
                $result := $t2
            }

            function A2_M_underflow() -> $result {
                let x, $t1, $t2, $t3
                // $t1 := 0
                /// @src 2:2164:2165
                $t1 := 0
                // $t2 := 1
                /// @src 2:2179:2180
                $t2 := 1
                // $t3 := -($t1, $t2)
                /// @src 2:2177:2178
                $t3 := $Sub($t1, $t2)
                // return $t3
                /// @src 2:2175:2180
                $result := $t3
            }

            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $MulU64(x, y) -> r {
                if gt(y, div(0xffffffffffffffff, x)) { $AbortBuiltin() }
                r := mul(x, y)
            }
            function $AddU8(x, y) -> r {
                if lt(sub(0xff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $MulU8(x, y) -> r {
                if gt(y, div(0xff, x)) { $AbortBuiltin() }
                r := mul(x, y)
            }
            function $AddU128(x, y) -> r {
                if lt(sub(0xffffffffffffffffffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $MulU128(x, y) -> r {
                if gt(y, div(0xffffffffffffffffffffffffffffffff, x)) { $AbortBuiltin() }
                r := mul(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Div(x, y) -> r {
                if eq(y, 0) { $AbortBuiltin() }
                r := div(x, y)
            }
            function $Mod(x, y) -> r {
                if eq(y, 0) { $AbortBuiltin() }
                r := mod(x, y)
            }
            function $Gt(x, y) -> r {
                r := gt(x, y)
            }
            function $Lt(x, y) -> r {
                r := lt(x, y)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $LtEq(x, y) -> r {
                r := or(lt(x, y), eq(x, y))
            }
            function $Neq(x, y) -> r {
                r := not(eq(x, y))
            }
            function $LogicalNot(x) -> r {
                r := not(x)
            }
        }
    }
}


!! Optimized Yul

Pretty printed source:
/// @use-src 2:"tests/Arithm.move"
object "A2_M" {
    code {
        {
            let _1 := datasize("A2_M_deployed")
            codecopy(0, dataoffset("A2_M_deployed"), _1)
            return(0, _1)
        }
    }
    object "A2_M_deployed" {
        code {
            {
                let _1 := 0
                mstore(_1, memoryguard(0xa0))
                let _2 := sload(101)
                let _3 := sload(100)
                if lt(sub(0xffffffffffffffff, _3), _2) { revert(_1, _1) }
                sstore(200, 3)
                sstore(201, add(_3, _2))
                let $dummy2, $dummy3 := A2_M_arithmetic_ops(sload(102))
                sstore(202, $dummy2)
                sstore(203, $dummy3)
                let $dummy4, $dummy5 := A2_M_bool_ops(sload(104), sload(105))
                sstore(204, $dummy4)
                sstore(205, $dummy5)
                let _4 := sload(107)
                let _5 := sload(106)
                if iszero(_4) { revert(_1, _1) }
                sstore(206, div(_5, _4))
                sstore(207, mod(_5, _4))
                revert(_1, _1)
            }
            function A2_M_arithmetic_ops(a) -> $result0, $result1
            {
                let $t2 := 0
                let $t2_1 := $t2
                let $block := 4
                for { } true { }
                {
                    switch $block
                    case 2 { revert($t2, $t2) }
                    case 3 {
                        $result0 := $t2_1
                        $result1 := a
                        leave
                    }
                    case 4 {
                        $t2_1 := 2
                        $block := $t2_1
                    }
                }
            }
            function A2_M_bool_ops(a, b) -> $result0, $result1
            {
                let tmp := 0
                let tmp_1 := tmp
                let $block := 4
                for { } true { }
                {
                    switch $block
                    case 2 {
                        tmp := or(gt(a, b), eq(a, b))
                        $block := 5
                    }
                    case 3 {
                        tmp := false
                        $block := 5
                    }
                    case 4 {
                        switch gt(a, b)
                        case 0 { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        switch lt(a, b)
                        case 0 { $block := 7 }
                        default { $block := 6 }
                    }
                    case 6 {
                        tmp_1 := true
                        $block := 8
                    }
                    case 7 {
                        tmp_1 := or(lt(a, b), eq(a, b))
                        $block := 8
                    }
                    case 8 {
                        switch eq(tmp, tmp_1)
                        case 0 { $block := 10 }
                        default { $block := 9 }
                    }
                    case 9 { revert(0, 0) }
                    case 10 {
                        $result0 := tmp
                        $result1 := tmp_1
                        leave
                    }
                }
            }
        }
    }
}
