/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/fallback-receive-test/expect-failure/FallbackMultipleParams.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $ShiftRight(224, calldataload(0))
                switch selector
                default {}
            }
            if callvalue()
            {
                $Abort(99)
            }

            // Dummy calls to reference callables for Yul optimizer
            let $dummy0 := A2_M_fallback(sload(100), sload(101))
            sstore(200, $dummy0)

            function A2_M_fallback(x, y) -> $result {
                let $t2
                // $t2 := +($t0, $t1)
                /// @src 2:86:87
                $t2 := $AddU64(x, y)
                // return $t2
                /// @src 2:84:89
                $result := $t2
            }

            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $ShiftRight(bits, value) -> r {
                r := shr(bits, value) // evm version >= constantinople
            }
        }
    }
}


!! Move-To-Yul Diagnostics:
 error: fallback function must have at most 1 parameter and 1 return value
  ┌─ tests/fallback-receive-test/expect-failure/FallbackMultipleParams.move:5:2
  │
5 │ ╭     fun fallback(x: u64, y: u64): u64 {
6 │ │         x + y
7 │ │     }
  │ ╰─────^
