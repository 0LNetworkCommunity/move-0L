/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/fallback-receive-test/expect-failure/FallbackReciveFailure.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $ShiftRight(224, calldataload(0))
                switch selector
                case 0x847c345a
                {
                    // fallback(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$u64$(4, calldatasize())
                    let ret_0 := A2_M_fallback(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$u64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x5cdf6ad2
                {
                    // receive(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$u64$(4, calldatasize())
                    let ret_0 := A2_M_receive(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$u64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            if iszero(calldatasize()) { A2_M_receive() stop() }
            if callvalue()
            {
                $Abort(99)
            }
            let retval := A2_M_receive(0, calldatasize()) stop()
            return(add(retval, 0x20), mload(retval))

            // Dummy calls to reference callables for Yul optimizer
            let $dummy0 := A2_M_fallback(sload(100))
            sstore(200, $dummy0)
            let $dummy1 := A2_M_receive(sload(101))
            sstore(201, $dummy1)

            function A2_M_fallback(x) -> $result {
                // return $t0
                /// @src 2:95:96
                $result := x
            }

            function A2_M_receive(x) -> $result {
                // return $t0
                /// @src 2:163:164
                $result := x
            }

            function abi_encode_tuple_$u64$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_u64(value_0, add(headStart, 0))
            }
            function abi_encode_u64(value, pos) {
                mstore(pos, cleanup_u64(value))
            }
            function cleanup_u64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_tuple_$u64$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_u64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_u64(offset, end) -> value {
                value := calldataload(offset)
                validator_u64(value)
            }
            function validator_u64(value) {
                if iszero(eq(value, cleanup_u64(value))) { $Abort(95) }
            }
            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $ShiftRight(bits, value) -> r {
                r := shr(bits, value) // evm version >= constantinople
            }
        }
    }
}


!! Move-To-Yul Diagnostics:
 error: multiple #[receive] functions
   ┌─ tests/fallback-receive-test/expect-failure/FallbackReciveFailure.move:10:2
   │
10 │ ╭     fun receive(x: u64): u64 {
11 │ │         x
12 │ │     }
   │ ╰─────^

error: receive function must be payable
   ┌─ tests/fallback-receive-test/expect-failure/FallbackReciveFailure.move:10:2
   │
10 │ ╭     fun receive(x: u64): u64 {
11 │ │         x
12 │ │     }
   │ ╰─────^

error: receive function must not be a fallback or callable function
   ┌─ tests/fallback-receive-test/expect-failure/FallbackReciveFailure.move:10:2
   │
10 │ ╭     fun receive(x: u64): u64 {
11 │ │         x
12 │ │     }
   │ ╰─────^

error: receive function must not have parameters
   ┌─ tests/fallback-receive-test/expect-failure/FallbackReciveFailure.move:10:2
   │
10 │ ╭     fun receive(x: u64): u64 {
11 │ │         x
12 │ │     }
   │ ╰─────^

error: multiple #[fallback] functions
   ┌─ tests/fallback-receive-test/expect-failure/FallbackReciveFailure.move:10:2
   │
10 │ ╭     fun receive(x: u64): u64 {
11 │ │         x
12 │ │     }
   │ ╰─────^

error: fallback function must not be a callable function
   ┌─ tests/fallback-receive-test/expect-failure/FallbackReciveFailure.move:10:2
   │
10 │ ╭     fun receive(x: u64): u64 {
11 │ │         x
12 │ │     }
   │ ╰─────^
