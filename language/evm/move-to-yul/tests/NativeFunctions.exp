/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_NativeFunctions" {
    code {
        codecopy(0, dataoffset("A2_NativeFunctions_deployed"), datasize("A2_NativeFunctions_deployed"))
        return(0, datasize("A2_NativeFunctions_deployed"))
    }
    object "A2_NativeFunctions_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x90b6bab2
                {
                    // call_native_functions()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_NativeFunctions_call_native_functions()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_NativeFunctions_call_native_functions() {
                let $t0, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15
                // $t0 := U256::one()
                $t0 := A2_U256_one()
                // $t1 := Evm::blockhash($t0)
                $t1 := A2_Evm_blockhash($t0)
                // destroy($t1)
                // $t2 := Evm::block_basefee()
                $t2 := A2_Evm_block_basefee()
                // destroy($t2)
                $Free($t2, 0)
                // $t3 := Evm::block_chainid()
                $t3 := A2_Evm_block_chainid()
                // destroy($t3)
                $Free($t3, 0)
                // $t4 := Evm::block_coinbase()
                $t4 := A2_Evm_block_coinbase()
                // destroy($t4)
                // $t5 := Evm::block_difficulty()
                $t5 := A2_Evm_block_difficulty()
                // destroy($t5)
                $Free($t5, 0)
                // $t6 := Evm::block_gaslimit()
                $t6 := A2_Evm_block_gaslimit()
                // destroy($t6)
                $Free($t6, 0)
                // $t7 := Evm::block_number()
                $t7 := A2_Evm_block_number()
                // destroy($t7)
                $Free($t7, 0)
                // $t8 := Evm::block_timestamp()
                $t8 := A2_Evm_block_timestamp()
                // destroy($t8)
                $Free($t8, 0)
                // $t9 := Evm::gasleft()
                $t9 := A2_Evm_gasleft()
                // destroy($t9)
                $Free($t9, 0)
                // $t10 := Evm::msg_data()
                $t10 := A2_Evm_msg_data()
                // destroy($t10)
                // $t11 := Evm::msg_sender()
                $t11 := A2_Evm_msg_sender()
                // destroy($t11)
                // $t12 := Evm::msg_sig()
                $t12 := A2_Evm_msg_sig()
                // destroy($t12)
                // $t13 := Evm::msg_value()
                $t13 := A2_Evm_msg_value()
                // destroy($t13)
                $Free($t13, 0)
                // $t14 := Evm::tx_gasprice()
                $t14 := A2_Evm_tx_gasprice()
                // destroy($t14)
                $Free($t14, 0)
                // $t15 := Evm::tx_origin()
                $t15 := A2_Evm_tx_origin()
                // destroy($t15)
                // return ()
            }

            function A2_Evm_tx_origin() -> result {
              result := origin()
            }
            function A2_Evm_tx_gasprice() -> result {
              result := gasprice()
            }
            function A2_Evm_msg_value() -> result {
              result := callvalue()
            }
            function A2_Evm_msg_sig() -> result {
              result := timestamp()
            }
            function A2_Evm_msg_sender() -> result {
              result := caller()
            }
            function A2_Evm_msg_data() -> result {
              result := calldataload(0)
            }
            function A2_Evm_gasleft() -> result {
              result := gas()
            }
            function A2_Evm_block_timestamp() -> result {
              result := timestamp()
            }
            function A2_Evm_block_number() -> result {
              result := number()
            }
            function A2_Evm_block_gaslimit() -> result {
              result := gaslimit()
            }
            function A2_Evm_block_difficulty() -> result {
              result := difficulty()
            }
            function A2_Evm_block_coinbase() -> result {
              result := coinbase()
            }
            function A2_Evm_block_chainid() -> result {
              result := chainid()
            }
            function A2_Evm_block_basefee() -> result {
              result := basefee()
            }
            function A2_Evm_blockhash(block_number) -> hash {
              hash := blockhash(block_number)
            }
            function A2_U256_one() -> $result {
                let $t0
                // $t0 := 1
                $t0 := 1
                // return $t0
                $result := $t0
            }

            function abi_encode_tuple_(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Free(offs, size) {
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul
