/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/Structs.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(96))

            // Dummy calls to reference callables for Yul optimizer
            A2_M_destroy()
            let $dummy0 := A2_M_pack_S(sload(100), sload(101))
            sstore(200, $dummy0)
            let $dummy1 := A2_M_pack_S2(sload(101))
            sstore(201, $dummy1)
            let $dummy2 := A2_M_read_S(sload(102))
            sstore(202, $dummy2)
            let $dummy3 := A2_M_read_and_write_s()
            sstore(203, $dummy3)
            let $dummy4 := A2_M_unpack(sload(104))
            sstore(204, $dummy4)
            A2_M_write_S(sload(105), sload(106))

            function A2_M_destroy() {
                let _s, $t1, $t2, $t3
                // $t1 := 1
                /// @src 2:777:778
                $t1 := 1
                // $t2 := false
                /// @src 2:780:785
                $t2 := false
                // $t3 := M::pack_S($t1, $t2)
                /// @src 2:770:786
                $t3 := A2_M_pack_S($t1, $t2)
                // destroy($t3)
                /// @src 2:765:767
                {
                    let $field_ptr := $LoadU256(add($t3, 9))
                    $Free($field_ptr, 8)
                }
                $Free($t3, 41)
                // return ()
                /// @src 2:786:787
            }

            function A2_M_pack_S(a, b) -> $result {
                let $t2, $t3
                // $t2 := M::pack_S2($t0)
                /// @src 2:277:287
                $t2 := A2_M_pack_S2(a)
                // $t3 := pack M::S($t0, $t1, $t2)
                /// @src 2:266:288
                {
                    let $mem := $Malloc(41)
                    $MemoryStoreU64(add($mem, 0), a)
                    $MemoryStoreU8(add($mem, 8), b)
                    $MemoryStoreU256(add($mem, 9), $t2)
                    $t3 := $mem
                }
                // return $t3
                /// @src 2:266:288
                $result := $t3
            }

            function A2_M_pack_S2(x) -> $result {
                let $t1
                // $t1 := pack M::S2($t0)
                /// @src 2:195:200
                {
                    let $mem := $Malloc(8)
                    $MemoryStoreU64(add($mem, 0), x)
                    $t1 := $mem
                }
                // return $t1
                /// @src 2:195:200
                $result := $t1
            }

            function A2_M_read_S(s) -> $result {
                let $t1, $t2, $t3, $t4, $t5, $t6
                // $t1 := borrow_field<M::S>.a($t0)
                /// @src 2:349:352
                $t1 := add($LoadU256(s), 0)
                // $t2 := read_ref($t1)
                /// @src 2:349:352
                $t2 := $LoadU64($t1)
                // $t3 := borrow_field<M::S>.c($t0)
                /// @src 2:355:358
                $t3 := add($LoadU256(s), 9)
                // $t4 := borrow_field<M::S2>.x($t3)
                /// @src 2:355:360
                $t4 := add($LoadU256($t3), 0)
                // $t5 := read_ref($t4)
                /// @src 2:355:360
                $t5 := $LoadU64($t4)
                // $t6 := +($t2, $t5)
                /// @src 2:353:354
                $t6 := $AddU64($t2, $t5)
                // return $t6
                /// @src 2:349:360
                $result := $t6
            }

            function A2_M_read_and_write_s() -> $result {
                let x, $t2, $t3, $t4, $t5, $t6, $t7
                let $locals := $Malloc(32)
                // $t2 := 1
                /// @src 2:537:538
                $t2 := 1
                // $t3 := false
                /// @src 2:540:545
                $t3 := false
                // $t0 := M::pack_S($t2, $t3)
                /// @src 2:530:546
                mstore(add($locals, 32), A2_M_pack_S($t2, $t3))
                // $t4 := borrow_local($t0)
                /// @src 2:571:573
                $t4 := add($locals, 32)
                // $t5 := M::read_S($t4)
                /// @src 2:564:574
                $t5 := A2_M_read_S($t4)
                // $t6 := borrow_local($t0)
                /// @src 2:592:598
                $t6 := add($locals, 32)
                // M::write_S($t6, $t5)
                /// @src 2:584:602
                A2_M_write_S($t6, $t5)
                // $t7 := move($t0)
                /// @src 2:612:613
                $t7 := mload(add($locals, 32))
                // return $t7
                /// @src 2:612:613
                $result := $t7
                $Free($locals, 32)
            }

            function A2_M_unpack(s) -> $result {
                let _a, _b, c, $t4, $t5, $t6
                // ($t4, $t5, $t6) := unpack M::S($t0)
                /// @src 2:676:694
                $t4 := $MemoryLoadU64(add(s, 0))
                $t5 := $MemoryLoadU8(add(s, 8))
                $t6 := $MemoryLoadU256(add(s, 9))
                $Free(s, 41)
                // destroy($t5)
                /// @src 2:688:690
                // destroy($t4)
                /// @src 2:681:683
                // return $t6
                /// @src 2:708:709
                $result := $t6
            }

            function A2_M_write_S(s, v) {
                let $t2, $t3, $t4, $t5, $t6
                // $t2 := borrow_field<M::S>.a($t0)
                /// @src 2:429:432
                $t2 := add($LoadU256(s), 0)
                // write_ref($t2, $t1)
                /// @src 2:429:436
                $StoreU64($t2, v)
                // $t3 := borrow_field<M::S>.a($t0)
                /// @src 2:454:457
                $t3 := add($LoadU256(s), 0)
                // $t4 := read_ref($t3)
                /// @src 2:454:457
                $t4 := $LoadU64($t3)
                // $t5 := borrow_field<M::S>.c($t0)
                /// @src 2:446:449
                $t5 := add($LoadU256(s), 9)
                // $t6 := borrow_field<M::S2>.x($t5)
                /// @src 2:446:451
                $t6 := add($LoadU256($t5), 0)
                // write_ref($t6, $t4)
                /// @src 2:446:457
                $StoreU64($t6, $t4)
                // return ()
                /// @src 2:457:458
            }

            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                mstore(0, add(offs, size))
            }
            function $Free(offs, size) {
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(ptr, 1)
            }
            function $ToWordOffs(offs) -> word_offs, bit_offs {
              word_offs := shr(offs, 5)
              bit_offs := shl(and(offs, 0x1F), 3)
            }
            function $StorageKey(type, word) -> key {
              mstore(32, word)
              mstore(64, type)
              key := keccak256(32, 33)
            }
            function $MemoryLoadU8(offs) -> val {
              val := and(mload(offs), 0xff)
            }
            function $MemoryStoreU8(offs, val) {
              mstore8(offs, val)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := and(mload(offs), 0xffffffffffffffff)
            }
            function $StorageLoadU64(offs) -> val {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := and(shr(sload(key), bit_offs), 0xffffffffffffffff)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 64) {
                let overflow_bits := sub(64, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                val := or(val, shl(and(sload(key), mask), used_bits))
              }
            }
            function $StoreU64(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU64(offs, val)
              }
              default {
                $StorageStoreU64(offs, val)
              }
            }
            function $MemoryStoreU64(offs, val) {
              mstore(offs, or(and(mload(offs), not(0xffffffffffffffff)), val))
            }
            function $StorageStoreU64(offs, val) {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let word := sload(key)
              word := or(and(word, not(shl(0xffffffffffffffff, bit_offs))), shl(val, bit_offs))
              mstore(key, word)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 64) {
                let overflow_bits := sub(64, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, or(and(sload(key), not(mask)), shr(val, used_bits)))
              }
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := mload(offs)
            }
            function $StorageLoadU256(offs) -> val {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := shr(sload(key), bit_offs)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 256) {
                let overflow_bits := sub(256, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                val := or(val, shl(and(sload(key), mask), used_bits))
              }
            }
            function $MemoryStoreU256(offs, val) {
              mstore(offs, val)
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
        }
    }
}


!! Optimized Yul

Pretty printed source:
/// @use-src 2:"tests/Structs.move"
object "A2_M" {
    code {
        {
            let _1 := datasize("A2_M_deployed")
            codecopy(0, dataoffset("A2_M_deployed"), _1)
            return(0, _1)
        }
    }
    object "A2_M_deployed" {
        code {
            {
                mstore(0, memoryguard(0x60))
                pop($LoadU256(add(A2_M_pack_S(), 9)))
                let _1 := sload(101)
                let _2 := sload(100)
                let $t2 := A2_M_pack_S2(_2)
                let offs := mload(0)
                mstore(0, add(offs, 41))
                mstore(offs, or(and(mload(offs), not(0xffffffffffffffff)), _2))
                mstore8(add(offs, 8), _1)
                mstore(add(offs, 9), $t2)
                sstore(200, offs)
                sstore(201, A2_M_pack_S2(_1))
                sstore(202, A2_M_read_S(sload(102)))
                let _3 := add(mload(0), 32)
                mstore(0, _3)
                mstore(_3, A2_M_pack_S())
                A2_M_write_S(_3, A2_M_read_S(_3))
                sstore(203, mload(_3))
                sstore(204, A2_M_unpack(sload(104)))
                A2_M_write_S(sload(105), sload(106))
            }
            function A2_M_pack_S() -> $result
            {
                let offs := mload(0)
                mstore(0, add(offs, 8))
                let _1 := not(0xffffffffffffffff)
                mstore(offs, or(and(mload(offs), _1), 1))
                let offs_1 := mload(0)
                mstore(0, add(offs_1, 41))
                mstore(offs_1, or(and(mload(offs_1), _1), 1))
                mstore8(add(offs_1, 8), false)
                mstore(add(offs_1, 9), offs)
                $result := offs_1
            }
            function A2_M_pack_S2(x) -> $result
            {
                let offs := mload(0)
                mstore(0, add(offs, 8))
                mstore(offs, or(and(mload(offs), not(0xffffffffffffffff)), x))
                $result := offs
            }
            function A2_M_read_S(s) -> $result
            {
                let $t2 := $LoadU64($LoadU256(s))
                let _1 := $LoadU64($LoadU256(add($LoadU256(s), 9)))
                if lt(sub(0xffffffffffffffff, $t2), _1) { revert(0, 0) }
                $result := add($t2, _1)
            }
            function A2_M_unpack(s) -> $result
            { $result := mload(add(s, 9)) }
            function A2_M_write_S(s, v)
            {
                $StoreU64($LoadU256(s), v)
                $StoreU64($LoadU256(add($LoadU256(s), 9)), $LoadU64($LoadU256(s)))
            }
            function $ToWordOffs(offs) -> word_offs, bit_offs
            {
                word_offs := shr(offs, 5)
                bit_offs := shl(and(offs, 0x1F), 3)
            }
            function $LoadU64(ptr) -> val
            {
                let offs := shr(ptr, 1)
                switch and(ptr, 1)
                case 0 {
                    val := and(mload(offs), 0xffffffffffffffff)
                }
                default {
                    let val_1 := 0
                    let word_offs, bit_offs := $ToWordOffs(offs)
                    mstore(32, word_offs)
                    mstore(64, val_1)
                    val_1 := and(shr(sload(keccak256(32, 33)), bit_offs), 0xffffffffffffffff)
                    let used_bits := sub(256, bit_offs)
                    if lt(used_bits, 64)
                    {
                        mstore(32, add(word_offs, 1))
                        mstore(64, 0)
                        val_1 := or(val_1, shl(and(sload(keccak256(32, 33)), add(shl(1, add(bit_offs, not(191))), not(0))), used_bits))
                    }
                    val := val_1
                }
            }
            function $StoreU64(ptr, val)
            {
                let offs := shr(ptr, 1)
                switch and(ptr, 1)
                case 0 {
                    mstore(offs, or(and(mload(offs), not(0xffffffffffffffff)), val))
                }
                default {
                    let word_offs, bit_offs := $ToWordOffs(offs)
                    mstore(32, word_offs)
                    mstore(64, 0)
                    let key := keccak256(32, 33)
                    let word := sload(key)
                    mstore(key, or(word, shl(val, bit_offs)))
                    let used_bits := sub(256, bit_offs)
                    if lt(used_bits, 64)
                    {
                        mstore(32, add(word_offs, 1))
                        mstore(64, 0)
                        let key_1 := keccak256(32, 33)
                        sstore(key_1, or(and(sload(key_1), not(add(shl(1, add(bit_offs, not(191))), not(0)))), shr(val, used_bits)))
                    }
                }
            }
            function $LoadU256(ptr) -> val
            {
                let offs := shr(ptr, 1)
                switch and(ptr, 1)
                case 0 { val := mload(offs) }
                default {
                    let val_1 := 0
                    let word_offs, bit_offs := $ToWordOffs(offs)
                    mstore(32, word_offs)
                    mstore(64, val_1)
                    val_1 := shr(sload(keccak256(32, 33)), bit_offs)
                    let _1 := 256
                    let used_bits := sub(_1, bit_offs)
                    if lt(used_bits, _1)
                    {
                        mstore(32, add(word_offs, 1))
                        mstore(64, 0)
                        val_1 := or(val_1, shl(and(sload(keccak256(32, 33)), add(shl(1, bit_offs), not(0))), used_bits))
                    }
                    val := val_1
                }
            }
        }
    }
}
