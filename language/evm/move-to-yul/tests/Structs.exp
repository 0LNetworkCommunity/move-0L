/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/Structs.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $ShiftRight(224, calldataload(0))
                switch selector
                case 0x83197ef0
                {
                    // destroy()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_M_destroy()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xe9fec640
                {
                    // pack_S(uint64,bool)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$u64_bool$(4, calldatasize())
                    let ret_0 := A2_M_pack_S(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$A2_M_S$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x4509feb9
                {
                    // pack_S2(uint128)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$u128$(4, calldatasize())
                    let ret_0 := A2_M_pack_S2(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$A2_M_S2$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x74d3ea10
                {
                    // read_and_write_s()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_read_and_write_s()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$A2_M_S$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x50ec714f
                {
                    // unpack((uint64,bool,(uint128)))
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$A2_M_S$(4, calldatasize())
                    let ret_0 := A2_M_unpack(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$A2_M_S2$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function abi_decode_bool(offset, end) -> value {
                value := calldataload(offset)
                validator_bool(value)
            }
            function abi_decode_tuple_$A2_M_S$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 96) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := (add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_tuple_$u128$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_u128(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_tuple_$u64_bool$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_u64(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_bool(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_u128(offset, end) -> value {
                value := calldataload(offset)
                validator_u128(value)
            }
            function abi_decode_u64(offset, end) -> value {
                value := calldataload(offset)
                validator_u64(value)
            }
            function abi_encode_tuple_(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_encode_tuple_$A2_M_S$(headStart ,value_0) -> tail {
                tail := add(headStart, 96)
                (value_0, add(headStart, 0))
            }
            function abi_encode_tuple_$A2_M_S2$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                (value_0, add(headStart, 0))
            }
            function cleanup_bool(value) -> cleaned {
                cleaned := iszero(iszero(value))
            }
            function cleanup_u128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function cleanup_u64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function validator_bool(value) {
                if iszero(eq(value, cleanup_bool(value))) { $Abort(95) }
            }
            function validator_u128(value) {
                if iszero(eq(value, cleanup_u128(value))) { $Abort(95) }
            }
            function validator_u64(value) {
                if iszero(eq(value, cleanup_u64(value))) { $Abort(95) }
            }

            // Dummy calls to reference callables for Yul optimizer
            A2_M_destroy()
            let $dummy0 := A2_M_pack_S(sload(100), sload(101))
            sstore(200, $dummy0)
            let $dummy1 := A2_M_pack_S2(sload(101))
            sstore(201, $dummy1)
            let $dummy2 := A2_M_read_and_write_s()
            sstore(202, $dummy2)
            let $dummy3 := A2_M_unpack(sload(103))
            sstore(203, $dummy3)

            function A2_M_destroy() {
                let _s, $t1, $t2, $t3
                // $t1 := 1
                /// @src 2:814:815
                $t1 := 1
                // $t2 := false
                /// @src 2:817:822
                $t2 := false
                // $t3 := M::pack_S($t1, $t2)
                /// @src 2:807:823
                $t3 := A2_M_pack_S($t1, $t2)
                // destroy($t3)
                /// @src 2:802:804
                {
                    let $field_ptr := $LoadU256(add($t3, 0))
                    $Free($field_ptr, 16)
                }
                $Free($t3, 41)
                // return ()
                /// @src 2:823:824
            }

            function A2_M_pack_S(a, b) -> $result {
                let $t2, $t3, $t4
                // $t2 := (u128)($t0)
                /// @src 2:287:298
                $t2 := $CastU128(a)
                // $t3 := M::pack_S2($t2)
                /// @src 2:279:299
                $t3 := A2_M_pack_S2($t2)
                // $t4 := pack M::S($t0, $t1, $t3)
                /// @src 2:268:300
                {
                    let $mem := $Malloc(41)
                    $MemoryStoreU64(add($mem, 32), a)
                    $MemoryStoreU8(add($mem, 40), b)
                    $MemoryStoreU256(add($mem, 0), $t3)
                    $t4 := $mem
                }
                // return $t4
                /// @src 2:268:300
                $result := $t4
            }

            function A2_M_pack_S2(x) -> $result {
                let $t1
                // $t1 := pack M::S2($t0)
                /// @src 2:197:202
                {
                    let $mem := $Malloc(16)
                    $MemoryStoreU128(add($mem, 0), x)
                    $t1 := $mem
                }
                // return $t1
                /// @src 2:197:202
                $result := $t1
            }

            function A2_M_read_and_write_s() -> $result {
                let x, $t2, $t3, $t4, $t5, $t6, $t7
                let $locals := $Malloc(32)
                // $t2 := 1
                /// @src 2:574:575
                $t2 := 1
                // $t3 := false
                /// @src 2:577:582
                $t3 := false
                // $t0 := M::pack_S($t2, $t3)
                /// @src 2:567:583
                mstore(add($locals, 32), A2_M_pack_S($t2, $t3))
                // $t4 := borrow_local($t0)
                /// @src 2:608:610
                $t4 := $MakePtr(false, add($locals, 32))
                // $t5 := M::read_S($t4)
                /// @src 2:601:611
                $t5 := A2_M_read_S($t4)
                // $t6 := borrow_local($t0)
                /// @src 2:629:635
                $t6 := $MakePtr(false, add($locals, 32))
                // M::write_S($t6, $t5)
                /// @src 2:621:639
                A2_M_write_S($t6, $t5)
                // $t7 := move($t0)
                /// @src 2:649:650
                $t7 := mload(add($locals, 32))
                // return $t7
                /// @src 2:649:650
                $result := $t7
                $Free($locals, 32)
            }

            function A2_M_unpack(s) -> $result {
                let _a, _b, c, $t4, $t5, $t6
                // ($t4, $t5, $t6) := unpack M::S($t0)
                /// @src 2:713:731
                $t4 := $MemoryLoadU64(add(s, 32))
                $t5 := $MemoryLoadU8(add(s, 40))
                $t6 := $MemoryLoadU256(add(s, 0))
                $Free(s, 41)
                // destroy($t5)
                /// @src 2:725:727
                // destroy($t4)
                /// @src 2:718:720
                // return $t6
                /// @src 2:745:746
                $result := $t6
            }

            function A2_M_write_S(s, v) {
                let $t2, $t3, $t4, $t5, $t6, $t7
                // $t2 := borrow_field<M::S>.a($t0)
                /// @src 2:456:459
                $t2 := $IndexPtr($LoadU256(s), 32)
                // write_ref($t2, $t1)
                /// @src 2:456:463
                $StoreU64($t2, v)
                // $t3 := borrow_field<M::S>.a($t0)
                /// @src 2:482:485
                $t3 := $IndexPtr($LoadU256(s), 32)
                // $t4 := read_ref($t3)
                /// @src 2:482:485
                $t4 := $LoadU64($t3)
                // $t5 := (u128)($t4)
                /// @src 2:481:494
                $t5 := $CastU128($t4)
                // $t6 := borrow_field<M::S>.c($t0)
                /// @src 2:473:476
                $t6 := $IndexPtr($LoadU256(s), 0)
                // $t7 := borrow_field<M::S2>.x($t6)
                /// @src 2:473:478
                $t7 := $IndexPtr($LoadU256($t6), 0)
                // write_ref($t7, $t5)
                /// @src 2:473:494
                $StoreU128($t7, $t5)
                // return ()
                /// @src 2:494:495
            }

            function A2_M_read_S(s) -> $result {
                let $t1, $t2, $t3, $t4, $t5, $t6, $t7
                // $t1 := borrow_field<M::S>.a($t0)
                /// @src 2:364:367
                $t1 := $IndexPtr($LoadU256(s), 32)
                // $t2 := read_ref($t1)
                /// @src 2:364:367
                $t2 := $LoadU64($t1)
                // $t3 := borrow_field<M::S>.c($t0)
                /// @src 2:371:374
                $t3 := $IndexPtr($LoadU256(s), 0)
                // $t4 := borrow_field<M::S2>.x($t3)
                /// @src 2:371:376
                $t4 := $IndexPtr($LoadU256($t3), 0)
                // $t5 := read_ref($t4)
                /// @src 2:371:376
                $t5 := $LoadU128($t4)
                // $t6 := (u64)($t5)
                /// @src 2:370:384
                $t6 := $CastU64($t5)
                // $t7 := +($t2, $t6)
                /// @src 2:368:369
                $t7 := $AddU64($t2, $t6)
                // return $t7
                /// @src 2:364:384
                $result := $t7
            }

            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shr(add(size, 31), 5)))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(offs, 1))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(ptr, 1)
            }
            function $ToWordOffs(offs) -> word_offs, bit_offs {
              word_offs := shr(offs, 5)
              bit_offs := shl(and(offs, 0x1F), 3)
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, group)
              key := keccak256(32, 36)
            }
            function $IndexPtr(ptr, offs) -> new_ptr {
              new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
            }
            function $MemoryLoadU8(offs) -> val {
              val := and(mload(offs), 0xff)
            }
            function $MemoryStoreU8(offs, val) {
              mstore8(offs, val)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := and(mload(offs), 0xffffffffffffffff)
            }
            function $StorageLoadU64(offs) -> val {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := and(shr(sload(key), bit_offs), 0xffffffffffffffff)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 64) {
                let overflow_bits := sub(64, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                val := or(val, shl(and(sload(key), mask), used_bits))
              }
            }
            function $StoreU64(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU64(offs, val)
              }
              default {
                $StorageStoreU64(offs, val)
              }
            }
            function $MemoryStoreU64(offs, val) {
              mstore(offs, or(and(mload(offs), not(0xffffffffffffffff)), val))
            }
            function $StorageStoreU64(offs, val) {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let word := sload(key)
              word := or(and(word, not(shl(0xffffffffffffffff, bit_offs))), shl(val, bit_offs))
              mstore(key, word)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 64) {
                let overflow_bits := sub(64, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, or(and(sload(key), not(mask)), shr(val, used_bits)))
              }
            }
            function $LoadU128(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU128(offs)
              }
              default {
                val := $StorageLoadU128(offs)
              }
            }
            function $MemoryLoadU128(offs) -> val {
              val := and(mload(offs), 0xffffffffffffffffffffffffffffffff)
            }
            function $StorageLoadU128(offs) -> val {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := and(shr(sload(key), bit_offs), 0xffffffffffffffffffffffffffffffff)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 128) {
                let overflow_bits := sub(128, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                val := or(val, shl(and(sload(key), mask), used_bits))
              }
            }
            function $StoreU128(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU128(offs, val)
              }
              default {
                $StorageStoreU128(offs, val)
              }
            }
            function $MemoryStoreU128(offs, val) {
              mstore(offs, or(and(mload(offs), not(0xffffffffffffffffffffffffffffffff)), val))
            }
            function $StorageStoreU128(offs, val) {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let word := sload(key)
              word := or(and(word, not(shl(0xffffffffffffffffffffffffffffffff, bit_offs))), shl(val, bit_offs))
              mstore(key, word)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 128) {
                let overflow_bits := sub(128, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, or(and(sload(key), not(mask)), shr(val, used_bits)))
              }
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := mload(offs)
            }
            function $StorageLoadU256(offs) -> val {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := shr(sload(key), bit_offs)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 256) {
                let overflow_bits := sub(256, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                val := or(val, shl(and(sload(key), mask), used_bits))
              }
            }
            function $MemoryStoreU256(offs, val) {
              mstore(offs, val)
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $CastU64(x) -> r {
                if gt(x, 0xffffffffffffffff) { $AbortBuiltin() }
                r := x
            }
            function $CastU128(x) -> r {
                if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
                r := x
            }
            function $ShiftRight(bits, value) -> r {
                r := shr(bits, value) // evm version >= constantinople
            }
        }
    }
}


!! Errors compiling Yul

Warning: Yul is still experimental. Please use the output with care.
Error: Literal or identifier expected.
  --> <stdin>:93:32:
   |
93 |                     value_0 := (add(headStart, offset), dataEnd)
   |                                ^

Error: Expected keyword "data" or "object" or "}".
  --> <stdin>:93:32:
   |
93 |                     value_0 := (add(headStart, offset), dataEnd)
   |                                ^
