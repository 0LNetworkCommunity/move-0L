/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */



object "Empty" {
    code {
        codecopy(0, dataoffset("Empty_deployed"), datasize("Empty_deployed"))
        return(0, datasize("Empty_deployed"))
    }
    object "Empty_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                default {}
            }
            $Abort(97)
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul


!! Unit tests

// test of M::test_pack_S
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 17:"tests/Structs.move"


object "test_A2_M_test_pack_S" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_pack_S()
        return (0, 0)
        function A2_M_test_pack_S() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t8 := 100
                    /// @src 17:702:705
                    $t8 := 100
                    // abort($t8)
                    /// @src 17:683:706
                    $Abort($t8)
                }
                case 3 {
                    // label L0
                    // $t9 := borrow_local($t0)
                    /// @src 17:724:725
                    $t9 := $MakePtr(false, s)
                    // $t10 := borrow_field<M::S>.b($t9)
                    /// @src 17:724:727
                    $t10 := $IndexPtr($t9, 40)
                    // $t11 := read_ref($t10)
                    /// @src 17:724:727
                    $t11 := $LoadU8($t10)
                    // $t12 := true
                    /// @src 17:731:735
                    $t12 := true
                    // $t13 := ==($t11, $t12)
                    /// @src 17:728:730
                    $t13 := $Eq($t11, $t12)
                    // if ($t13) goto L2 else goto L3
                    /// @src 17:716:741
                    switch $t13
                    case 0  { $block := 5 }
                    default { $block := 6 }
                }
                case 4 {
                    // $t1 := 42
                    /// @src 17:664:666
                    $t1 := 42
                    // $t2 := true
                    /// @src 17:668:672
                    $t2 := true
                    // $t0 := M::pack_S($t1, $t2)
                    /// @src 17:657:673
                    s := A2_M_pack_S($t1, $t2)
                    // $t3 := borrow_local($t0)
                    /// @src 17:691:692
                    $t3 := $MakePtr(false, s)
                    // $t4 := borrow_field<M::S>.a($t3)
                    /// @src 17:691:694
                    $t4 := $IndexPtr($t3, 32)
                    // $t5 := read_ref($t4)
                    /// @src 17:691:694
                    $t5 := $LoadU64($t4)
                    // $t6 := 42
                    /// @src 17:698:700
                    $t6 := 42
                    // $t7 := ==($t5, $t6)
                    /// @src 17:695:697
                    $t7 := $Eq($t5, $t6)
                    // if ($t7) goto L0 else goto L1
                    /// @src 17:683:706
                    switch $t7
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
                case 5 {
                    // label L3
                    // $t14 := 101
                    /// @src 17:737:740
                    $t14 := 101
                    // abort($t14)
                    /// @src 17:716:741
                    $Abort($t14)
                }
                case 6 {
                    // label L2
                    // $t15 := borrow_local($t0)
                    /// @src 17:759:760
                    $t15 := $MakePtr(false, s)
                    // $t16 := borrow_field<M::S>.c($t15)
                    /// @src 17:759:762
                    {
                        $t16 := $MakePtr($IsStoragePtr($t15), $LoadU256($t15))
                    }
                    // $t17 := borrow_field<M::S2>.x($t16)
                    /// @src 17:759:764
                    $t17 := $t16
                    // $t18 := read_ref($t17)
                    /// @src 17:759:764
                    $t18 := $LoadU128($t17)
                    // $t19 := 42
                    /// @src 17:768:770
                    $t19 := 42
                    // $t20 := ==($t18, $t19)
                    /// @src 17:765:767
                    $t20 := $Eq($t18, $t19)
                    // if ($t20) goto L4 else goto L5
                    /// @src 17:751:776
                    switch $t20
                    case 0  { $block := 7 }
                    default { $block := 8 }
                }
                case 7 {
                    // label L5
                    // $t21 := 102
                    /// @src 17:772:775
                    $t21 := 102
                    // abort($t21)
                    /// @src 17:751:776
                    $Abort($t21)
                }
                case 8 {
                    // label L4
                    // return ()
                    /// @src 17:776:777
                    leave
                }
            }
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            /// @src 17:581:592
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            /// @src 17:573:593
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack M::S($t0, $t1, $t3)
            /// @src 17:562:594
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            /// @src 17:562:594
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack M::S2($t0)
            /// @src 17:229:234
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            /// @src 17:229:234
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if not(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, group)
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU8(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU8(offs)
          }
          default {
            val := $StorageLoadU8(offs)
          }
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $StorageLoadU8(offs) -> val {
          val := $StorageLoadBytes(offs, 1)
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Succeed(Stopped) (used_gas=1244): []

// test of M::test_pack_S2
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 17:"tests/Structs.move"


object "test_A2_M_test_pack_S2" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_pack_S2()
        return (0, 0)
        function A2_M_test_pack_S2() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t7 := 100
                    /// @src 17:338:341
                    $t7 := 100
                    // abort($t7)
                    /// @src 17:319:342
                    $Abort($t7)
                }
                case 3 {
                    // label L0
                    // return ()
                    /// @src 17:319:342
                    leave
                }
                case 4 {
                    // $t1 := 42
                    /// @src 17:306:308
                    $t1 := 42
                    // $t0 := M::pack_S2($t1)
                    /// @src 17:298:309
                    s := A2_M_pack_S2($t1)
                    // $t2 := borrow_local($t0)
                    /// @src 17:327:328
                    $t2 := $MakePtr(false, s)
                    // $t3 := borrow_field<M::S2>.x($t2)
                    /// @src 17:327:330
                    $t3 := $t2
                    // $t4 := read_ref($t3)
                    /// @src 17:327:330
                    $t4 := $LoadU128($t3)
                    // $t5 := 42
                    /// @src 17:334:336
                    $t5 := 42
                    // $t6 := ==($t4, $t5)
                    /// @src 17:331:333
                    $t6 := $Eq($t4, $t5)
                    // if ($t6) goto L0 else goto L1
                    /// @src 17:319:342
                    switch $t6
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
            }
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack M::S2($t0)
            /// @src 17:229:234
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            /// @src 17:229:234
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if not(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, group)
          key := keccak256(32, 36)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
    }
}
===> Succeed(Stopped) (used_gas=382): []

// test of M::test_pack_S2_fail
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 17:"tests/Structs.move"


object "test_A2_M_test_pack_S2_fail" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_pack_S2_fail()
        return (0, 0)
        function A2_M_test_pack_S2_fail() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t7 := 100
                    /// @src 17:451:454
                    $t7 := 100
                    // abort($t7)
                    /// @src 17:432:455
                    $Abort($t7)
                }
                case 3 {
                    // label L0
                    // return ()
                    /// @src 17:432:455
                    leave
                }
                case 4 {
                    // $t1 := 42
                    /// @src 17:419:421
                    $t1 := 42
                    // $t0 := M::pack_S2($t1)
                    /// @src 17:411:422
                    s := A2_M_pack_S2($t1)
                    // $t2 := borrow_local($t0)
                    /// @src 17:440:441
                    $t2 := $MakePtr(false, s)
                    // $t3 := borrow_field<M::S2>.x($t2)
                    /// @src 17:440:443
                    $t3 := $t2
                    // $t4 := read_ref($t3)
                    /// @src 17:440:443
                    $t4 := $LoadU128($t3)
                    // $t5 := 41
                    /// @src 17:447:449
                    $t5 := 41
                    // $t6 := ==($t4, $t5)
                    /// @src 17:444:446
                    $t6 := $Eq($t4, $t5)
                    // if ($t6) goto L0 else goto L1
                    /// @src 17:432:455
                    switch $t6
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
            }
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack M::S2($t0)
            /// @src 17:229:234
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            /// @src 17:229:234
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if not(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, group)
          key := keccak256(32, 36)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
    }
}
===> Revert(Reverted) (used_gas=369): [0, 0, 0, 0, 0, 0, 0, 100]

// test of M::test_read_S
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 17:"tests/Structs.move"


object "test_A2_M_test_read_S" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_read_S()
        return (0, 0)
        function A2_M_test_read_S() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t7 := 100
                    /// @src 17:1011:1014
                    $t7 := 100
                    // abort($t7)
                    /// @src 17:985:1015
                    $Abort($t7)
                }
                case 3 {
                    // label L0
                    // return ()
                    /// @src 17:1015:1016
                    leave
                }
                case 4 {
                    // $t1 := 42
                    /// @src 17:966:968
                    $t1 := 42
                    // $t2 := true
                    /// @src 17:970:974
                    $t2 := true
                    // $t0 := M::pack_S($t1, $t2)
                    /// @src 17:959:975
                    s := A2_M_pack_S($t1, $t2)
                    // $t3 := borrow_local($t0)
                    /// @src 17:1000:1002
                    $t3 := $MakePtr(false, s)
                    // $t4 := M::read_S($t3)
                    /// @src 17:993:1003
                    $t4 := A2_M_read_S($t3)
                    // $t5 := 84
                    /// @src 17:1007:1009
                    $t5 := 84
                    // $t6 := ==($t4, $t5)
                    /// @src 17:1004:1006
                    $t6 := $Eq($t4, $t5)
                    // if ($t6) goto L0 else goto L1
                    /// @src 17:985:1015
                    switch $t6
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
            }
        }

        function A2_M_read_S(s) -> $result {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7
            // $t1 := borrow_field<M::S>.a($t0)
            /// @src 17:876:879
            $t1 := $IndexPtr(s, 32)
            // $t2 := read_ref($t1)
            /// @src 17:876:879
            $t2 := $LoadU64($t1)
            // $t3 := borrow_field<M::S>.c($t0)
            /// @src 17:883:886
            {
                $t3 := $MakePtr($IsStoragePtr(s), $LoadU256(s))
            }
            // $t4 := borrow_field<M::S2>.x($t3)
            /// @src 17:883:888
            $t4 := $t3
            // $t5 := read_ref($t4)
            /// @src 17:883:888
            $t5 := $LoadU128($t4)
            // $t6 := (u64)($t5)
            /// @src 17:882:896
            $t6 := $CastU64($t5)
            // $t7 := +($t2, $t6)
            /// @src 17:880:881
            $t7 := $AddU64($t2, $t6)
            // return $t7
            /// @src 17:876:896
            $result := $t7
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            /// @src 17:581:592
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            /// @src 17:573:593
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack M::S($t0, $t1, $t3)
            /// @src 17:562:594
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            /// @src 17:562:594
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack M::S2($t0)
            /// @src 17:229:234
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            /// @src 17:229:234
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if not(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, group)
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $AddU64(x, y) -> r {
            if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
            r := add(x, y)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $CastU64(x) -> r {
            if gt(x, 0xffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Succeed(Stopped) (used_gas=836): []

// test of M::test_read_and_write_S
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 17:"tests/Structs.move"


object "test_A2_M_test_read_and_write_S" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_read_and_write_S()
        return (0, 0)
        function A2_M_test_read_and_write_S() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t6 := 100
                    /// @src 17:1652:1655
                    $t6 := 100
                    // abort($t6)
                    /// @src 17:1634:1656
                    $Abort($t6)
                }
                case 3 {
                    // label L0
                    // $t7 := borrow_local($t0)
                    /// @src 17:1674:1675
                    $t7 := $MakePtr(false, s)
                    // $t8 := borrow_field<M::S>.c($t7)
                    /// @src 17:1674:1677
                    {
                        $t8 := $MakePtr($IsStoragePtr($t7), $LoadU256($t7))
                    }
                    // $t9 := borrow_field<M::S2>.x($t8)
                    /// @src 17:1674:1679
                    $t9 := $t8
                    // $t10 := read_ref($t9)
                    /// @src 17:1674:1679
                    $t10 := $LoadU128($t9)
                    // $t11 := 2
                    /// @src 17:1683:1684
                    $t11 := 2
                    // $t12 := ==($t10, $t11)
                    /// @src 17:1680:1682
                    $t12 := $Eq($t10, $t11)
                    // if ($t12) goto L2 else goto L3
                    /// @src 17:1666:1690
                    switch $t12
                    case 0  { $block := 5 }
                    default { $block := 6 }
                }
                case 4 {
                    // $t0 := M::read_and_write_S()
                    /// @src 17:1606:1624
                    s := A2_M_read_and_write_S()
                    // $t1 := borrow_local($t0)
                    /// @src 17:1642:1643
                    $t1 := $MakePtr(false, s)
                    // $t2 := borrow_field<M::S>.a($t1)
                    /// @src 17:1642:1645
                    $t2 := $IndexPtr($t1, 32)
                    // $t3 := read_ref($t2)
                    /// @src 17:1642:1645
                    $t3 := $LoadU64($t2)
                    // $t4 := 2
                    /// @src 17:1649:1650
                    $t4 := 2
                    // $t5 := ==($t3, $t4)
                    /// @src 17:1646:1648
                    $t5 := $Eq($t3, $t4)
                    // if ($t5) goto L0 else goto L1
                    /// @src 17:1634:1656
                    switch $t5
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
                case 5 {
                    // label L3
                    // $t13 := 101
                    /// @src 17:1686:1689
                    $t13 := 101
                    // abort($t13)
                    /// @src 17:1666:1690
                    $Abort($t13)
                }
                case 6 {
                    // label L2
                    // return ()
                    /// @src 17:1690:1691
                    leave
                }
            }
        }

        function A2_M_read_and_write_S() -> $result {
            let s, x, $t2, $t3, $t4, $t5, $t6, $t7
            // $t2 := 1
            /// @src 17:1457:1458
            $t2 := 1
            // $t3 := false
            /// @src 17:1460:1465
            $t3 := false
            // $t0 := M::pack_S($t2, $t3)
            /// @src 17:1450:1466
            s := A2_M_pack_S($t2, $t3)
            // $t4 := borrow_local($t0)
            /// @src 17:1491:1493
            $t4 := $MakePtr(false, s)
            // $t5 := M::read_S($t4)
            /// @src 17:1484:1494
            $t5 := A2_M_read_S($t4)
            // $t6 := borrow_local($t0)
            /// @src 17:1512:1518
            $t6 := $MakePtr(false, s)
            // M::write_S($t6, $t5)
            /// @src 17:1504:1522
            A2_M_write_S($t6, $t5)
            // $t7 := move($t0)
            /// @src 17:1532:1533
            $t7 := s
            // return $t7
            /// @src 17:1532:1533
            $result := $t7
        }

        function A2_M_write_S(s, v) {
            let $t2, $t3, $t4, $t5, $t6, $t7
            // $t2 := borrow_field<M::S>.a($t0)
            /// @src 17:1123:1126
            $t2 := $IndexPtr(s, 32)
            // write_ref($t2, $t1)
            /// @src 17:1123:1130
            $StoreU64($t2, v)
            // $t3 := borrow_field<M::S>.a($t0)
            /// @src 17:1149:1152
            $t3 := $IndexPtr(s, 32)
            // $t4 := read_ref($t3)
            /// @src 17:1149:1152
            $t4 := $LoadU64($t3)
            // $t5 := (u128)($t4)
            /// @src 17:1148:1161
            $t5 := $CastU128($t4)
            // $t6 := borrow_field<M::S>.c($t0)
            /// @src 17:1140:1143
            {
                $t6 := $MakePtr($IsStoragePtr(s), $LoadU256(s))
            }
            // $t7 := borrow_field<M::S2>.x($t6)
            /// @src 17:1140:1145
            $t7 := $t6
            // write_ref($t7, $t5)
            /// @src 17:1140:1161
            $StoreU128($t7, $t5)
            // return ()
            /// @src 17:1161:1162
        }

        function A2_M_read_S(s) -> $result {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7
            // $t1 := borrow_field<M::S>.a($t0)
            /// @src 17:876:879
            $t1 := $IndexPtr(s, 32)
            // $t2 := read_ref($t1)
            /// @src 17:876:879
            $t2 := $LoadU64($t1)
            // $t3 := borrow_field<M::S>.c($t0)
            /// @src 17:883:886
            {
                $t3 := $MakePtr($IsStoragePtr(s), $LoadU256(s))
            }
            // $t4 := borrow_field<M::S2>.x($t3)
            /// @src 17:883:888
            $t4 := $t3
            // $t5 := read_ref($t4)
            /// @src 17:883:888
            $t5 := $LoadU128($t4)
            // $t6 := (u64)($t5)
            /// @src 17:882:896
            $t6 := $CastU64($t5)
            // $t7 := +($t2, $t6)
            /// @src 17:880:881
            $t7 := $AddU64($t2, $t6)
            // return $t7
            /// @src 17:876:896
            $result := $t7
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            /// @src 17:581:592
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            /// @src 17:573:593
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack M::S($t0, $t1, $t3)
            /// @src 17:562:594
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            /// @src 17:562:594
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack M::S2($t0)
            /// @src 17:229:234
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            /// @src 17:229:234
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if not(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, group)
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $StoreU128(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU128(offs, val)
          }
          default {
            $StorageStoreU128(offs, val)
          }
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $StorageStoreU128(offs, val) {
          $StorageStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $AddU64(x, y) -> r {
            if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
            r := add(x, y)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $CastU64(x) -> r {
            if gt(x, 0xffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Succeed(Stopped) (used_gas=1794): []

// test of M::test_unpack
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 17:"tests/Structs.move"


object "test_A2_M_test_unpack" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_unpack()
        return (0, 0)
        function A2_M_test_unpack() {
            let s, s1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t10 := 101
                    /// @src 17:1964:1967
                    $t10 := 101
                    // abort($t10)
                    /// @src 17:1944:1968
                    $Abort($t10)
                }
                case 3 {
                    // label L0
                    // return ()
                    /// @src 17:1968:1969
                    leave
                }
                case 4 {
                    // $t2 := 33
                    /// @src 17:1896:1898
                    $t2 := 33
                    // $t3 := false
                    /// @src 17:1900:1905
                    $t3 := false
                    // $t4 := M::pack_S($t2, $t3)
                    /// @src 17:1889:1906
                    $t4 := A2_M_pack_S($t2, $t3)
                    // $t1 := M::unpack($t4)
                    /// @src 17:1925:1934
                    s1 := A2_M_unpack($t4)
                    // $t5 := borrow_local($t1)
                    /// @src 17:1952:1954
                    $t5 := $MakePtr(false, s1)
                    // $t6 := borrow_field<M::S2>.x($t5)
                    /// @src 17:1952:1956
                    $t6 := $t5
                    // $t7 := read_ref($t6)
                    /// @src 17:1952:1956
                    $t7 := $LoadU128($t6)
                    // $t8 := 33
                    /// @src 17:1960:1962
                    $t8 := 33
                    // $t9 := ==($t7, $t8)
                    /// @src 17:1957:1959
                    $t9 := $Eq($t7, $t8)
                    // if ($t9) goto L0 else goto L1
                    /// @src 17:1944:1968
                    switch $t9
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
            }
        }

        function A2_M_unpack(s) -> $result {
            let _a, _b, c, $t4, $t5, $t6
            // ($t4, $t5, $t6) := unpack M::S($t0)
            /// @src 17:1793:1811
            $t4 := $MemoryLoadU64(add(s, 32))
            $t5 := $MemoryLoadU8(add(s, 40))
            $t6 := $MemoryLoadU256(add(s, 0))
            $Free(s, 41)
            // destroy($t5)
            /// @src 17:1805:1807
            // destroy($t4)
            /// @src 17:1798:1800
            // return $t6
            /// @src 17:1825:1826
            $result := $t6
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            /// @src 17:581:592
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            /// @src 17:573:593
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack M::S($t0, $t1, $t3)
            /// @src 17:562:594
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            /// @src 17:562:594
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack M::S2($t0)
            /// @src 17:229:234
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            /// @src 17:229:234
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if not(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, group)
          key := keccak256(32, 36)
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Succeed(Stopped) (used_gas=502): []

// test of M::test_write_S
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 17:"tests/Structs.move"


object "test_A2_M_test_write_S" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_write_S()
        return (0, 0)
        function A2_M_test_write_S() {
            let s, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t10 := 100
                    /// @src 17:1300:1303
                    $t10 := 100
                    // abort($t10)
                    /// @src 17:1281:1304
                    $Abort($t10)
                }
                case 3 {
                    // label L0
                    // $t11 := borrow_local($t0)
                    /// @src 17:1322:1323
                    $t11 := $MakePtr(false, s)
                    // $t12 := borrow_field<M::S>.c($t11)
                    /// @src 17:1322:1325
                    {
                        $t12 := $MakePtr($IsStoragePtr($t11), $LoadU256($t11))
                    }
                    // $t13 := borrow_field<M::S2>.x($t12)
                    /// @src 17:1322:1327
                    $t13 := $t12
                    // $t14 := read_ref($t13)
                    /// @src 17:1322:1327
                    $t14 := $LoadU128($t13)
                    // $t15 := 43
                    /// @src 17:1331:1333
                    $t15 := 43
                    // $t16 := ==($t14, $t15)
                    /// @src 17:1328:1330
                    $t16 := $Eq($t14, $t15)
                    // if ($t16) goto L2 else goto L3
                    /// @src 17:1314:1339
                    switch $t16
                    case 0  { $block := 5 }
                    default { $block := 6 }
                }
                case 4 {
                    // $t1 := 42
                    /// @src 17:1233:1235
                    $t1 := 42
                    // $t2 := true
                    /// @src 17:1237:1241
                    $t2 := true
                    // $t0 := M::pack_S($t1, $t2)
                    /// @src 17:1226:1242
                    s := A2_M_pack_S($t1, $t2)
                    // $t3 := borrow_local($t0)
                    /// @src 17:1260:1266
                    $t3 := $MakePtr(false, s)
                    // $t4 := 43
                    /// @src 17:1268:1270
                    $t4 := 43
                    // M::write_S($t3, $t4)
                    /// @src 17:1252:1271
                    A2_M_write_S($t3, $t4)
                    // $t5 := borrow_local($t0)
                    /// @src 17:1289:1290
                    $t5 := $MakePtr(false, s)
                    // $t6 := borrow_field<M::S>.a($t5)
                    /// @src 17:1289:1292
                    $t6 := $IndexPtr($t5, 32)
                    // $t7 := read_ref($t6)
                    /// @src 17:1289:1292
                    $t7 := $LoadU64($t6)
                    // $t8 := 43
                    /// @src 17:1296:1298
                    $t8 := 43
                    // $t9 := ==($t7, $t8)
                    /// @src 17:1293:1295
                    $t9 := $Eq($t7, $t8)
                    // if ($t9) goto L0 else goto L1
                    /// @src 17:1281:1304
                    switch $t9
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
                case 5 {
                    // label L3
                    // $t17 := 101
                    /// @src 17:1335:1338
                    $t17 := 101
                    // abort($t17)
                    /// @src 17:1314:1339
                    $Abort($t17)
                }
                case 6 {
                    // label L2
                    // return ()
                    /// @src 17:1339:1340
                    leave
                }
            }
        }

        function A2_M_write_S(s, v) {
            let $t2, $t3, $t4, $t5, $t6, $t7
            // $t2 := borrow_field<M::S>.a($t0)
            /// @src 17:1123:1126
            $t2 := $IndexPtr(s, 32)
            // write_ref($t2, $t1)
            /// @src 17:1123:1130
            $StoreU64($t2, v)
            // $t3 := borrow_field<M::S>.a($t0)
            /// @src 17:1149:1152
            $t3 := $IndexPtr(s, 32)
            // $t4 := read_ref($t3)
            /// @src 17:1149:1152
            $t4 := $LoadU64($t3)
            // $t5 := (u128)($t4)
            /// @src 17:1148:1161
            $t5 := $CastU128($t4)
            // $t6 := borrow_field<M::S>.c($t0)
            /// @src 17:1140:1143
            {
                $t6 := $MakePtr($IsStoragePtr(s), $LoadU256(s))
            }
            // $t7 := borrow_field<M::S2>.x($t6)
            /// @src 17:1140:1145
            $t7 := $t6
            // write_ref($t7, $t5)
            /// @src 17:1140:1161
            $StoreU128($t7, $t5)
            // return ()
            /// @src 17:1161:1162
        }

        function A2_M_pack_S(a, b) -> $result {
            let $t2, $t3, $t4
            // $t2 := (u128)($t0)
            /// @src 17:581:592
            $t2 := $CastU128(a)
            // $t3 := M::pack_S2($t2)
            /// @src 17:573:593
            $t3 := A2_M_pack_S2($t2)
            // $t4 := pack M::S($t0, $t1, $t3)
            /// @src 17:562:594
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            /// @src 17:562:594
            $result := $t4
        }

        function A2_M_pack_S2(x) -> $result {
            let $t1
            // $t1 := pack M::S2($t0)
            /// @src 17:229:234
            {
                let $mem := $Malloc(16)
                $MemoryStoreU128(add($mem, 0), x)
                $t1 := $mem
            }
            // return $t1
            /// @src 17:229:234
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if not(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, group)
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $StoreU128(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU128(offs, val)
          }
          default {
            $StorageStoreU128(offs, val)
          }
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $StorageStoreU128(offs, val) {
          $StorageStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
    }
}
===> Succeed(Stopped) (used_gas=1371): []
