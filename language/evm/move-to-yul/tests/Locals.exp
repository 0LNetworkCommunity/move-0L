/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/Locals.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $ShiftRight(224, calldataload(0))
                switch selector
                case 0xc11ae395
                {
                    // evaded(uint64,uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$u64_u64$(4, calldatasize())
                    let ret_0, ret_1, ret_2, ret_3 := A2_M_evaded(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$u64_u64_u64_u64$(memPos, ret_0, ret_1, ret_2, ret_3)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)

            // Dummy calls to reference callables for Yul optimizer
            let $dummy0, $dummy1, $dummy2, $dummy3 := A2_M_evaded(sload(100), sload(101))
            sstore(200, $dummy0)
            sstore(201, $dummy1)
            sstore(202, $dummy2)
            sstore(203, $dummy3)

            function A2_M_evaded(a, b) -> $result0, $result1, $result2, $result3 {
                let ar, cr, d, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15
                let $locals := $Malloc(64)
                mstore($locals, a)
                // $t6 := copy($t0)
                /// @src 2:109:110
                $t6 := mload($locals)
                // $t3 := $t6
                /// @src 2:105:106
                mstore(add($locals, 32), $t6)
                // $t7 := copy($t3)
                /// @src 2:125:126
                $t7 := mload(add($locals, 32))
                // $t8 := +($t7, $t1)
                /// @src 2:127:128
                $t8 := $AddU64($t7, b)
                // $t9 := borrow_local($t0)
                /// @src 2:146:152
                $t9 := $MakePtr(false, $locals)
                // $t10 := borrow_local($t3)
                /// @src 2:168:170
                $t10 := $MakePtr(false, add($locals, 32))
                // $t11 := read_ref($t10)
                /// @src 2:183:186
                $t11 := $LoadU64($t10)
                // $t12 := 1
                /// @src 2:189:190
                $t12 := 1
                // $t13 := +($t11, $t12)
                /// @src 2:187:188
                $t13 := $AddU64($t11, $t12)
                // write_ref($t9, $t13)
                /// @src 2:177:190
                $StoreU64($t9, $t13)
                // $t14 := copy($t0)
                /// @src 2:198:199
                $t14 := mload($locals)
                // $t15 := copy($t3)
                /// @src 2:204:205
                $t15 := mload(add($locals, 32))
                // return ($t14, $t1, $t15, $t8)
                /// @src 2:197:209
                $result0 := $t14
                $result1 := b
                $result2 := $t15
                $result3 := $t8
                $Free($locals, 64)
            }

            function abi_encode_tuple_$u64_u64_u64_u64$(headStart ,value_0, value_1, value_2, value_3) -> tail {
                tail := add(headStart, 128)
                abi_encode_u64(value_0, add(headStart, 0))
                abi_encode_u64(value_1, add(headStart, 32))
                abi_encode_u64(value_2, add(headStart, 64))
                abi_encode_u64(value_3, add(headStart, 96))
            }
            function abi_encode_u64(value, pos) {
                mstore(pos, cleanup_u64(value))
            }
            function cleanup_u64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_tuple_$u64_u64$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_u64(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_u64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_u64(offset, end) -> value {
                value := calldataload(offset)
                validator_u64(value)
            }
            function validator_u64(value) {
                if iszero(eq(value, cleanup_u64(value))) { $Abort(95) }
            }
            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shr(add(size, 31), 5)))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(offs, 1))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(ptr, 1)
            }
            function $ToWordOffs(offs) -> word_offs, bit_offs {
              word_offs := shr(offs, 5)
              bit_offs := shl(and(offs, 0x1F), 3)
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, group)
              key := keccak256(32, 36)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := and(mload(offs), 0xffffffffffffffff)
            }
            function $StorageLoadU64(offs) -> val {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := and(shr(sload(key), bit_offs), 0xffffffffffffffff)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 64) {
                let overflow_bits := sub(64, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                val := or(val, shl(and(sload(key), mask), used_bits))
              }
            }
            function $StoreU64(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU64(offs, val)
              }
              default {
                $StorageStoreU64(offs, val)
              }
            }
            function $MemoryStoreU64(offs, val) {
              mstore(offs, or(and(mload(offs), not(0xffffffffffffffff)), val))
            }
            function $StorageStoreU64(offs, val) {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let word := sload(key)
              word := or(and(word, not(shl(0xffffffffffffffff, bit_offs))), shl(val, bit_offs))
              mstore(key, word)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 64) {
                let overflow_bits := sub(64, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, or(and(sload(key), not(mask)), shr(val, used_bits)))
              }
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $ShiftRight(bits, value) -> r {
                r := shr(bits, value) // evm version >= constantinople
            }
        }
    }
}


!! Optimized Yul

Pretty printed source:
/// @use-src 2:"tests/Locals.move"
object "A2_M" {
    code {
        {
            let _1 := datasize("A2_M_deployed")
            codecopy(0, dataoffset("A2_M_deployed"), _1)
            return(0, _1)
        }
    }
    object "A2_M_deployed" {
        code {
            {
                let _1 := memoryguard(0xa0)
                let _2 := 0
                mstore(_2, _1)
                if iszero(lt(calldatasize(), 4))
                {
                    if eq(0xc11ae395, shr(224, calldataload(_2)))
                    {
                        if callvalue() { revert(_2, _2) }
                        if slt(add(calldatasize(), not(3)), 64) { revert(_2, _2) }
                        let value := abi_decode_u64_806()
                        let value_1 := abi_decode_u64()
                        mstore(_2, _1)
                        mstore(_1, value)
                        let _3 := add(_1, 32)
                        mstore(_3, value)
                        let $t8 := $AddU64(value, value_1)
                        let _4 := 1
                        let _5 := or(false, shl(_3, _4))
                        let val := _2
                        let offs := shr(_5, _4)
                        switch and(_5, _4)
                        case 0 {
                            val := and(mload(offs), 0xffffffffffffffff)
                        }
                        default {
                            let val_1 := _2
                            let word_offs, bit_offs := $ToWordOffs(offs)
                            mstore(32, word_offs)
                            mstore(64, _2)
                            val_1 := and(shr(sload(keccak256(32, 36)), bit_offs), 0xffffffffffffffff)
                            let used_bits := sub(256, bit_offs)
                            if lt(used_bits, 64)
                            {
                                mstore(32, add(word_offs, _4))
                                mstore(64, _2)
                                val_1 := or(val_1, shl(and(sload(keccak256(32, 36)), add(shl(_4, add(bit_offs, not(191))), not(0))), used_bits))
                            }
                            val := val_1
                        }
                        $StoreU64(or(false, shl(_1, _4)), $AddU64_808(val))
                        let $t14 := mload(_1)
                        let $t15 := mload(_3)
                        let memPos := mload(_2)
                        return(memPos, sub(abi_encode_u64_u64_u64_u64$(memPos, $t14, value_1, $t15, $t8), memPos))
                    }
                }
                revert(_2, _2)
            }
            function abi_encode_u64_u64_u64_u64$(headStart, value, value_1, value_2, value_3) -> tail
            {
                tail := add(headStart, 128)
                let _1 := 0xffffffffffffffff
                mstore(headStart, and(value, _1))
                mstore(add(headStart, 32), and(value_1, _1))
                mstore(add(headStart, 64), and(value_2, _1))
                mstore(add(headStart, 96), and(value_3, _1))
            }
            function abi_decode_u64_806() -> value
            {
                value := calldataload(4)
                if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }
            }
            function abi_decode_u64() -> value
            {
                value := calldataload(36)
                if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }
            }
            function $ToWordOffs(offs) -> word_offs, bit_offs
            {
                word_offs := shr(offs, 5)
                bit_offs := shl(and(offs, 0x1F), 3)
            }
            function $StoreU64(ptr, val)
            {
                let offs := shr(ptr, 1)
                switch and(ptr, 1)
                case 0 {
                    mstore(offs, or(and(mload(offs), not(0xffffffffffffffff)), val))
                }
                default {
                    let word_offs, bit_offs := $ToWordOffs(offs)
                    mstore(32, word_offs)
                    mstore(64, 0)
                    let key := keccak256(32, 36)
                    let word := sload(key)
                    mstore(key, or(word, shl(val, bit_offs)))
                    let used_bits := sub(256, bit_offs)
                    if lt(used_bits, 64)
                    {
                        mstore(32, add(word_offs, 1))
                        mstore(64, 0)
                        let key_1 := keccak256(32, 36)
                        sstore(key_1, or(and(sload(key_1), not(add(shl(1, add(bit_offs, not(191))), not(0)))), shr(val, used_bits)))
                    }
                }
            }
            function $AddU64_808(x) -> r
            {
                if lt(sub(0xffffffffffffffff, x), 1) { revert(0, 0) }
                r := add(x, 1)
            }
            function $AddU64(x, y) -> r
            {
                if lt(sub(0xffffffffffffffff, x), y) { revert(0, 0) }
                r := add(x, y)
            }
        }
    }
}
