/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/Locals.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(96))

            // Dummy calls to reference callables for Yul optimizer
            let $dummy0, $dummy1, $dummy2, $dummy3 := A2_M_evaded(sload(100), sload(101))
            sstore(200, $dummy0)
            sstore(201, $dummy1)
            sstore(202, $dummy2)
            sstore(203, $dummy3)

            function A2_M_evaded(a, b) -> $result0, $result1, $result2, $result3 {
                let ar, cr, d, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15
                let $locals := $Malloc(64)
                mstore($locals, a)
                // $t6 := copy($t0)
                /// @src 2:109:110
                $t6 := mload($locals)
                // $t3 := $t6
                /// @src 2:105:106
                mstore(add($locals, 32), $t6)
                // $t7 := copy($t3)
                /// @src 2:125:126
                $t7 := mload(add($locals, 32))
                // $t8 := +($t7, $t1)
                /// @src 2:127:128
                $t8 := $AddU64($t7, b)
                // $t9 := borrow_local($t0)
                $t9 := $locals
                // $t10 := borrow_local($t3)
                $t10 := add($locals, 32)
                // $t11 := read_ref($t10)
                $t11 := $LoadU64($t10)
                // $t12 := 1
                $t12 := 1
                // $t13 := +($t11, $t12)
                /// @src 2:187:188
                $t13 := $AddU64($t11, $t12)
                // write_ref($t9, $t13)
                $StoreU64($t9, $t13)
                // $t14 := copy($t0)
                /// @src 2:198:199
                $t14 := mload($locals)
                // $t15 := copy($t3)
                /// @src 2:204:205
                $t15 := mload(add($locals, 32))
                // return ($t14, $t1, $t15, $t8)
                /// @src 2:197:209
                $result0 := $t14
                $result1 := b
                $result2 := $t15
                $result3 := $t8
                $Free($locals, 64)
            }

            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                mstore(0, add(offs, size))
            }
            function $Free(offs, size) {
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(ptr, 1)
            }
            function $ToWordOffs(offs) -> word_offs, bit_offs {
              word_offs := shr(offs, 5)
              bit_offs := shl(and(offs, 0x1F), 3)
            }
            function $StorageKey(type, word) -> key {
              mstore(32, word)
              mstore(64, type)
              key := keccak256(32, 33)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := and(mload(offs), 0xffffffffffffffff)
            }
            function $StorageLoadU64(offs) -> val {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := and(shr(sload(key), bit_offs), 0xffffffffffffffff)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 64) {
                let overflow_bits := sub(64, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                val := or(val, shl(and(sload(key), mask), used_bits))
              }
            }
            function $StoreU64(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU64(offs, val)
              }
              default {
                $StorageStoreU64(offs, val)
              }
            }
            function $MemoryStoreU64(offs, val) {
              mstore(offs, or(and(mload(offs), not(0xffffffffffffffff)), val))
            }
            function $StorageStoreU64(offs, val) {
              let word_offs, bit_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let word := sload(key)
              word := or(and(word, not(shl(0xffffffffffffffff, bit_offs))), shl(val, bit_offs))
              mstore(key, word)
              let used_bits := sub(256, bit_offs)
              if lt(used_bits, 64) {
                let overflow_bits := sub(64, used_bits)
                let mask := sub(shl(1, overflow_bits), 1)
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, or(and(sload(key), not(mask)), shr(val, used_bits)))
              }
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
        }
    }
}


!! Optimized Yul

Pretty printed source:
/// @use-src 2:"tests/Locals.move"
object "A2_M" {
    code {
        {
            let _1 := datasize("A2_M_deployed")
            codecopy(0, dataoffset("A2_M_deployed"), _1)
            return(0, _1)
        }
    }
    object "A2_M_deployed" {
        code {
            {
                let _1 := memoryguard(0x60)
                let _2 := 0
                mstore(_2, _1)
                let _3 := sload(101)
                let _4 := sload(100)
                mstore(_2, add(_1, 64))
                mstore(_1, _4)
                let _5 := add(_1, 32)
                mstore(_5, _4)
                let $t8 := $AddU64(_4, _3)
                let val := _2
                let offs := shr(_5, 1)
                switch and(_5, 1)
                case 0 {
                    val := and(mload(offs), 0xffffffffffffffff)
                }
                default {
                    let val_1 := _2
                    let word_offs, bit_offs := $ToWordOffs(offs)
                    mstore(32, word_offs)
                    mstore(64, _2)
                    val_1 := and(shr(sload(keccak256(32, 33)), bit_offs), 0xffffffffffffffff)
                    let used_bits := sub(256, bit_offs)
                    if lt(used_bits, 64)
                    {
                        mstore(32, add(word_offs, 1))
                        mstore(64, _2)
                        val_1 := or(val_1, shl(and(sload(keccak256(32, 33)), add(shl(1, add(bit_offs, not(191))), not(0))), used_bits))
                    }
                    val := val_1
                }
                $StoreU64(_1, $AddU64_630(val))
                let $t14 := mload(_1)
                let $t15 := mload(_5)
                sstore(200, $t14)
                sstore(201, _3)
                sstore(202, $t15)
                sstore(203, $t8)
            }
            function $ToWordOffs(offs) -> word_offs, bit_offs
            {
                word_offs := shr(offs, 5)
                bit_offs := shl(and(offs, 0x1F), 3)
            }
            function $StoreU64(ptr, val)
            {
                let offs := shr(ptr, 1)
                switch and(ptr, 1)
                case 0 {
                    mstore(offs, or(and(mload(offs), not(0xffffffffffffffff)), val))
                }
                default {
                    let word_offs, bit_offs := $ToWordOffs(offs)
                    mstore(32, word_offs)
                    mstore(64, 0)
                    let key := keccak256(32, 33)
                    let word := sload(key)
                    mstore(key, or(word, shl(val, bit_offs)))
                    let used_bits := sub(256, bit_offs)
                    if lt(used_bits, 64)
                    {
                        mstore(32, add(word_offs, 1))
                        mstore(64, 0)
                        let key_1 := keccak256(32, 33)
                        sstore(key_1, or(and(sload(key_1), not(add(shl(1, add(bit_offs, not(191))), not(0)))), shr(val, used_bits)))
                    }
                }
            }
            function $AddU64_630(x) -> r
            {
                if lt(sub(0xffffffffffffffff, x), 1) { revert(0, 0) }
                r := add(x, 1)
            }
            function $AddU64(x, y) -> r
            {
                if lt(sub(0xffffffffffffffff, x), y) { revert(0, 0) }
                r := add(x, y)
            }
        }
    }
}
