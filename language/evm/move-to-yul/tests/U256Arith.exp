/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/U256Arith.move"
/// @use-src 3:"../stdlib/sources/U256.move"

object "A2_U256Arith" {
    code {
        codecopy(0, dataoffset("A2_U256Arith_deployed"), datasize("A2_U256Arith_deployed"))
        return(0, datasize("A2_U256Arith_deployed"))
    }
    object "A2_U256Arith_deployed" {
        code {
            mstore(0, memoryguard(160))

            // Dummy calls to reference callables for Yul optimizer
            let $dummy0 := A2_U256Arith_add()
            sstore(200, $dummy0)
            let $dummy1 := A2_U256Arith_div()
            sstore(201, $dummy1)
            let $dummy2 := A2_U256Arith_eq()
            sstore(202, $dummy2)
            let $dummy3 := A2_U256Arith_ge()
            sstore(203, $dummy3)
            let $dummy4 := A2_U256Arith_gt()
            sstore(204, $dummy4)
            let $dummy5 := A2_U256Arith_le()
            sstore(205, $dummy5)
            let $dummy6 := A2_U256Arith_lt()
            sstore(206, $dummy6)
            let $dummy7 := A2_U256Arith_mod()
            sstore(207, $dummy7)
            let $dummy8 := A2_U256Arith_mul()
            sstore(208, $dummy8)
            let $dummy9 := A2_U256Arith_ne()
            sstore(209, $dummy9)
            let $dummy10 := A2_U256Arith_shl()
            sstore(210, $dummy10)
            let $dummy11 := A2_U256Arith_shr()
            sstore(211, $dummy11)
            let $dummy12 := A2_U256Arith_sub()
            sstore(212, $dummy12)
            let $dummy13 := A2_U256Arith_cast(sload(113), sload(114))
            sstore(213, $dummy13)

            function A2_U256Arith_add() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                /// @src 2:308:329
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                /// @src 2:347:368
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := +($t2, $t3)
                /// @src 2:378:393
                $t4 := $AddU256($t2, $t3)
                // return $t4
                /// @src 2:378:393
                $result := $t4
            }

            function A2_U256Arith_div() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                /// @src 2:749:770
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                /// @src 2:788:809
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := /($t2, $t3)
                /// @src 2:819:834
                $t4 := $Div($t2, $t3)
                // return $t4
                /// @src 2:819:834
                $result := $t4
            }

            function A2_U256Arith_eq() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                /// @src 2:1622:1643
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                /// @src 2:1661:1682
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := ==($t2, $t3)
                /// @src 2:1692:1706
                $t4 := $Eq($t2, $t3)
                // return $t4
                /// @src 2:1692:1706
                $result := $t4
            }

            function A2_U256Arith_ge() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                /// @src 2:1332:1353
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                /// @src 2:1371:1392
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := >=($t2, $t3)
                /// @src 2:1402:1416
                $t4 := $GtEq($t2, $t3)
                // return $t4
                /// @src 2:1402:1416
                $result := $t4
            }

            function A2_U256Arith_gt() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                /// @src 2:1042:1063
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                /// @src 2:1081:1102
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := >($t2, $t3)
                /// @src 2:1112:1126
                $t4 := $Gt($t2, $t3)
                // return $t4
                /// @src 2:1112:1126
                $result := $t4
            }

            function A2_U256Arith_le() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                /// @src 2:1477:1498
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                /// @src 2:1516:1537
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := <=($t2, $t3)
                /// @src 2:1547:1561
                $t4 := $LtEq($t2, $t3)
                // return $t4
                /// @src 2:1547:1561
                $result := $t4
            }

            function A2_U256Arith_lt() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                /// @src 2:1187:1208
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                /// @src 2:1226:1247
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := <($t2, $t3)
                /// @src 2:1257:1271
                $t4 := $Lt($t2, $t3)
                // return $t4
                /// @src 2:1257:1271
                $result := $t4
            }

            function A2_U256Arith_mod() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                /// @src 2:896:917
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                /// @src 2:935:956
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := %($t2, $t3)
                /// @src 2:966:981
                $t4 := $Mod($t2, $t3)
                // return $t4
                /// @src 2:966:981
                $result := $t4
            }

            function A2_U256Arith_mul() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                /// @src 2:602:623
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                /// @src 2:641:662
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := *($t2, $t3)
                /// @src 2:672:687
                $t4 := $MulU256($t2, $t3)
                // return $t4
                /// @src 2:672:687
                $result := $t4
            }

            function A2_U256Arith_ne() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                /// @src 2:1767:1788
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                /// @src 2:1806:1827
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := !=($t2, $t3)
                /// @src 2:1837:1851
                $t4 := $Neq($t2, $t3)
                // return $t4
                /// @src 2:1837:1851
                $result := $t4
            }

            function A2_U256Arith_shl() -> $result {
                let x, $t1, $t2, $t3
                // $t1 := 2041694201525630780780247644590609268738
                /// @src 2:1913:1934
                $t1 := 2041694201525630780780247644590609268738
                // $t2 := 127
                /// @src 2:1957:1960
                $t2 := 127
                // $t3 := <<($t1, $t2)
                /// @src 2:1944:1961
                $t3 := $ShlU256($t1, $t2)
                // return $t3
                /// @src 2:1944:1961
                $result := $t3
            }

            function A2_U256Arith_shr() -> $result {
                let x, $t1, $t2, $t3
                // $t1 := 2041694201525630780780247644590609268738
                /// @src 2:2023:2044
                $t1 := 2041694201525630780780247644590609268738
                // $t2 := 127
                /// @src 2:2067:2070
                $t2 := 127
                // $t3 := >>($t1, $t2)
                /// @src 2:2054:2071
                $t3 := $Shr($t1, $t2)
                // return $t3
                /// @src 2:2054:2071
                $result := $t3
            }

            function A2_U256Arith_sub() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                /// @src 2:455:476
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                /// @src 2:494:515
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := -($t2, $t3)
                /// @src 2:525:540
                $t4 := $Sub($t2, $t3)
                // return $t4
                /// @src 2:525:540
                $result := $t4
            }

            function A2_U256Arith_cast(x, y) -> $result {
                let $t2
                // $t2 := (u256)($t0, $t1)
                /// @src 2:225:246
                $t2 := $CastU256(x, y)
                // return $t2
                /// @src 2:225:246
                $result := $t2
            }

            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $AddU256(x, y) -> r {
                if lt(sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $MulU256(x, y) -> r {
                if gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x)) { $AbortBuiltin() }
                r := mul(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Div(x, y) -> r {
                if eq(y, 0) { $AbortBuiltin() }
                r := div(x, y)
            }
            function $Mod(x, y) -> r {
                if eq(y, 0) { $AbortBuiltin() }
                r := mod(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(x, y)
            }
            function $ShlU256(x, y) -> r {
                r := and(shl(x, y), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function $Gt(x, y) -> r {
                r := gt(x, y)
            }
            function $Lt(x, y) -> r {
                r := lt(x, y)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $LtEq(x, y) -> r {
                r := or(lt(x, y), eq(x, y))
            }
            function $Eq(x, y) -> r {
                r := eq(x, y)
            }
            function $Neq(x, y) -> r {
                r := not(eq(x, y))
            }
            function $CastU256(hi, lo) -> r {
                if gt(hi, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
                if gt(lo, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
                r := add(shl(hi, 128), lo)
            }
        }
    }
}


!! Errors compiling Yul

Warning: Yul is still experimental. Please use the output with care.
Error: Error parsing arguments to @use-src. Expected: <number> ":" "<filename>", ...
 --> <stdin>:5:1:
  |
5 | /// @use-src 2:"tests/U256Arith.move"
  | ^ (Relevant source part starts here and spans across multiple lines).
