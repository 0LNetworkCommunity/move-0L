/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/ControlStructures.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $ShiftRight(224, calldataload(0))
                switch selector
                case 0x70e8dbcb
                {
                    // f(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$u64$(4, calldatasize())
                    A2_M_f(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xb3e8e519
                {
                    // g(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$u64$(4, calldatasize())
                    A2_M_g(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xf5f96a87
                {
                    // h1(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$u64$(4, calldatasize())
                    let ret_0 := A2_M_h1(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$u64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x410dac7e
                {
                    // h2(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$u64$(4, calldatasize())
                    A2_M_h2(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)

            // Dummy calls to reference callables for Yul optimizer
            A2_M_f(sload(100))
            A2_M_g(sload(100))
            let $dummy0 := A2_M_h1(sload(100))
            sstore(200, $dummy0)
            A2_M_h2(sload(101))

            function A2_M_f(x) {
                let $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L0
                        // $t3 := 2
                        /// @src 2:258:259
                        $t3 := 2
                        // $t4 := %($t0, $t3)
                        /// @src 2:256:257
                        $t4 := $Mod(x, $t3)
                        // $t5 := 0
                        /// @src 2:263:264
                        $t5 := 0
                        // $t6 := ==($t4, $t5)
                        /// @src 2:260:262
                        $t6 := $Eq($t4, $t5)
                        // if ($t6) goto L3 else goto L5
                        /// @src 2:250:298
                        switch $t6
                        case 0  { $block := 6 }
                        default { $block := 5 }
                    }
                    case 3 {
                        // label L2
                        // return ()
                        /// @src 2:228:304
                        leave
                    }
                    case 4 {
                        // label L7
                        // $t1 := 0
                        /// @src 2:239:240
                        $t1 := 0
                        // $t2 := >($t0, $t1)
                        /// @src 2:237:238
                        $t2 := $Gt(x, $t1)
                        // if ($t2) goto L0 else goto L2
                        /// @src 2:228:304
                        switch $t2
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L3
                        // $t7 := 1
                        /// @src 2:276:277
                        $t7 := 1
                        // $t0 := +($t0, $t7)
                        /// @src 2:274:275
                        x := $AddU64(x, $t7)
                        // goto L6
                        /// @src 2:250:298
                        $block := 7
                    }
                    case 6 {
                        // label L5
                        // $t8 := 2
                        /// @src 2:295:296
                        $t8 := 2
                        // $t0 := -($t0, $t8)
                        /// @src 2:293:294
                        x := $Sub(x, $t8)
                        // goto L6
                        /// @src 2:250:298
                        $block := 7
                    }
                    case 7 {
                        // label L6
                        // goto L7
                        /// @src 2:250:298
                        $block := 4
                    }
                }
            }

            function A2_M_g(x) {
                let $t1, $t2, $t3, $t4, $t5
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L0
                        // $t3 := 1
                        /// @src 2:383:384
                        $t3 := 1
                        // $t0 := -($t0, $t3)
                        /// @src 2:381:382
                        x := $Sub(x, $t3)
                        // goto L3
                        /// @src 2:386:394
                        $block := 4
                    }
                    case 3 {
                        // label L2
                        // $t4 := 0
                        /// @src 2:415:416
                        $t4 := 0
                        // $t5 := ==($t0, $t4)
                        /// @src 2:412:414
                        $t5 := $Eq(x, $t4)
                        // if ($t5) goto L4 else goto L3
                        /// @src 2:406:423
                        switch $t5
                        case 0  { $block := 4 }
                        default { $block := 5 }
                    }
                    case 4 {
                        // label L3
                        // $t1 := 1
                        /// @src 2:370:371
                        $t1 := 1
                        // $t2 := >=($t0, $t1)
                        /// @src 2:367:369
                        $t2 := $GtEq(x, $t1)
                        // if ($t2) goto L0 else goto L2
                        /// @src 2:361:396
                        switch $t2
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L4
                        // return ()
                        /// @src 2:346:430
                        leave
                    }
                }
            }

            function A2_M_h1(x) -> $result {
                let tmp_$1, $t2, $t3, $t4, $t5
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L0
                        // $t4 := 1
                        /// @src 2:116:117
                        $t4 := 1
                        // $t1 := $t4
                        /// @src 2:105:124
                        tmp_$1 := $t4
                        // goto L3
                        /// @src 2:105:124
                        $block := 5
                    }
                    case 3 {
                        // label L2
                        // $t5 := 2
                        /// @src 2:123:124
                        $t5 := 2
                        // $t1 := $t5
                        /// @src 2:105:124
                        tmp_$1 := $t5
                        // goto L3
                        /// @src 2:105:124
                        $block := 5
                    }
                    case 4 {
                        // $t2 := 0
                        /// @src 2:113:114
                        $t2 := 0
                        // $t3 := >($t0, $t2)
                        /// @src 2:111:112
                        $t3 := $Gt(x, $t2)
                        // if ($t3) goto L0 else goto L2
                        /// @src 2:105:124
                        switch $t3
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L3
                        // return $t1
                        /// @src 2:105:124
                        $result := tmp_$1
                        leave
                    }
                }
            }

            function A2_M_h2(x) {
                let $t1, $t2, $t3
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L0
                        // $t3 := 1
                        /// @src 2:183:186
                        $t3 := 1
                        // abort($t3)
                        /// @src 2:178:186
                        $Abort($t3)
                    }
                    case 3 {
                        // label L2
                        // return ()
                        /// @src 2:167:186
                        leave
                    }
                    case 4 {
                        // $t1 := 0
                        /// @src 2:175:176
                        $t1 := 0
                        // $t2 := >($t0, $t1)
                        /// @src 2:173:174
                        $t2 := $Gt(x, $t1)
                        // if ($t2) goto L0 else goto L2
                        /// @src 2:167:186
                        switch $t2
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                }
            }

            function abi_encode_tuple_(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_decode_tuple_$u64$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_u64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_u64(offset, end) -> value {
                value := calldataload(offset)
                validator_u64(value)
            }
            function validator_u64(value) {
                if iszero(eq(value, cleanup_u64(value))) { $Abort(95) }
            }
            function cleanup_u64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_encode_tuple_$u64$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_u64(value_0, add(headStart, 0))
            }
            function abi_encode_u64(value, pos) {
                mstore(pos, cleanup_u64(value))
            }
            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Mod(x, y) -> r {
                if eq(y, 0) { $AbortBuiltin() }
                r := mod(x, y)
            }
            function $Gt(x, y) -> r {
                r := gt(x, y)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $Eq(x, y) -> r {
                r := eq(x, y)
            }
            function $ShiftRight(bits, value) -> r {
                r := shr(bits, value) // evm version >= constantinople
            }
        }
    }
}


!! Optimized Yul

Pretty printed source:
/// @use-src 2:"tests/ControlStructures.move"
object "A2_M" {
    code {
        {
            let _1 := datasize("A2_M_deployed")
            codecopy(0, dataoffset("A2_M_deployed"), _1)
            return(0, _1)
        }
    }
    object "A2_M_deployed" {
        code {
            {
                let _1 := memoryguard(0xa0)
                let _2 := 0
                mstore(_2, _1)
                if iszero(lt(calldatasize(), 4))
                {
                    switch shr(224, calldataload(_2))
                    case 0x70e8dbcb {
                        if callvalue() { revert(_2, _2) }
                        A2_M_f(abi_decode_u64(calldatasize()))
                        return(_1, _2)
                    }
                    case 0xb3e8e519 {
                        if callvalue() { revert(_2, _2) }
                        A2_M_g(abi_decode_u64(calldatasize()))
                        return(_1, _2)
                    }
                    case 0xf5f96a87 {
                        if callvalue() { revert(_2, _2) }
                        return(_1, sub(abi_encode_u64$(_1, A2_M_h1(abi_decode_u64(calldatasize()))), _1))
                    }
                    case 0x410dac7e {
                        if callvalue() { revert(_2, _2) }
                        A2_M_h2(abi_decode_u64(calldatasize()))
                        return(mload(_2), _2)
                    }
                }
                revert(_2, _2)
            }
            function A2_M_f(x)
            {
                let $block := 4
                let $block_1 := $block
                for { } true { }
                {
                    switch $block_1
                    case 2 {
                        switch iszero(and(x, 1))
                        case 0 { $block_1 := 6 }
                        default { $block_1 := 5 }
                    }
                    case 3 { leave }
                    case 4 {
                        switch iszero(iszero(x))
                        case 0 { $block_1 := 3 }
                        default { $block_1 := 2 }
                    }
                    case 5 {
                        let _1 := 1
                        if lt(sub(0xffffffffffffffff, x), _1)
                        {
                            let _2 := 0
                            revert(_2, _2)
                        }
                        x := add(x, _1)
                        $block_1 := 7
                    }
                    case 6 {
                        x := $Sub(x)
                        $block_1 := 7
                    }
                    case 7 { $block_1 := $block }
                }
            }
            function A2_M_g(x)
            {
                let $block := 4
                for { } true { }
                {
                    switch $block
                    case 2 {
                        if lt(x, 1)
                        {
                            let _1 := 0
                            revert(_1, _1)
                        }
                        x := add(x, not(0))
                        $block := 4
                    }
                    case 3 {
                        switch iszero(x)
                        case 0 { $block := 4 }
                        default { $block := 5 }
                    }
                    case 4 {
                        let _2 := 1
                        switch or(gt(x, _2), eq(x, _2))
                        case 0 { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 { leave }
                }
            }
            function A2_M_h1(x) -> $result
            {
                let tmp := 0
                let $block := 4
                for { } true { }
                {
                    switch $block
                    case 2 {
                        tmp := 1
                        $block := 5
                    }
                    case 3 {
                        tmp := 2
                        $block := 5
                    }
                    case 4 {
                        switch iszero(iszero(x))
                        case 0 { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        $result := tmp
                        leave
                    }
                }
            }
            function A2_M_h2(x)
            {
                let $block := 4
                for { } true { }
                {
                    switch $block
                    case 2 {
                        let _1 := 0
                        revert(_1, _1)
                    }
                    case 3 { leave }
                    case 4 {
                        switch iszero(iszero(x))
                        case 0 { $block := 3 }
                        default { $block := 2 }
                    }
                }
            }
            function abi_decode_u64(dataEnd) -> value
            {
                if slt(add(dataEnd, not(3)), 32) { revert(0, 0) }
                let value_1 := calldataload(4)
                if iszero(eq(value_1, and(value_1, 0xffffffffffffffff))) { revert(0, 0) }
                value := value_1
            }
            function abi_encode_u64$(headStart, value) -> tail
            {
                tail := add(headStart, 32)
                mstore(headStart, and(value, 0xffffffffffffffff))
            }
            function $Sub(x) -> r
            {
                if lt(x, 2) { revert(0, 0) }
                r := add(x, not(1))
            }
        }
    }
}
