/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */

/// @use-src 2:"tests/ControlStructures.move"

object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            function A2_M_f(x) {
                let $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        $t3 := 2
                        /// @src 2:256:257
                        $t4 := $Mod(x, $t3)
                        $t5 := 0
                        /// @src 2:260:262
                        $t6 := $Eq($t4, $t5)
                        /// @src 2:250:298
                        if $t6 { $block := 5 } else { $block := 6 }
                    }
                    case 3 {
                        /// @src 2:228:304
                        leave
                    }
                    case 4 {
                        $t1 := 0
                        /// @src 2:237:238
                        $t2 := $Gt(x, $t1)
                        /// @src 2:228:304
                        if $t2 { $block := 2 } else { $block := 3 }
                    }
                    case 5 {
                        $t7 := 1
                        /// @src 2:274:275
                        x := $AddU64(x, $t7)
                        /// @src 2:250:298
                        $block := 7
                    }
                    case 6 {
                        $t8 := 2
                        /// @src 2:293:294
                        x := $Sub(x, $t8)
                        /// @src 2:250:298
                        $block := 7
                    }
                    case 7 {
                        /// @src 2:250:298
                        $block := 4
                    }
                }
            }

            function A2_M_g(x) {
                let $t1, $t2, $t3, $t4, $t5
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        $t3 := 1
                        /// @src 2:381:382
                        x := $Sub(x, $t3)
                        /// @src 2:386:394
                        $block := 4
                    }
                    case 3 {
                        $t4 := 0
                        /// @src 2:412:414
                        $t5 := $Eq(x, $t4)
                        /// @src 2:406:423
                        if $t5 { $block := 5 } else { $block := 4 }
                    }
                    case 4 {
                        $t1 := 1
                        /// @src 2:367:369
                        $t2 := $GtEq(x, $t1)
                        /// @src 2:361:396
                        if $t2 { $block := 2 } else { $block := 3 }
                    }
                    case 5 {
                        /// @src 2:346:430
                        leave
                    }
                }
            }

            function A2_M_h1(x) -> $result {
                let tmp_$1, $t2, $t3, $t4, $t5
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        $t4 := 1
                        /// @src 2:105:124
                        tmp_$1 := $t4
                        /// @src 2:105:124
                        $block := 5
                    }
                    case 3 {
                        $t5 := 2
                        /// @src 2:105:124
                        tmp_$1 := $t5
                        /// @src 2:105:124
                        $block := 5
                    }
                    case 4 {
                        $t2 := 0
                        /// @src 2:111:112
                        $t3 := $Gt(x, $t2)
                        /// @src 2:105:124
                        if $t3 { $block := 2 } else { $block := 3 }
                    }
                    case 5 {
                        /// @src 2:105:124
                        $result := tmp_$1
                        leave
                    }
                }
            }

            function A2_M_h2(x) {
                let $t1, $t2, $t3
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        $t3 := 1
                        $Abort($t3)
                    }
                    case 3 {
                        /// @src 2:167:186
                        leave
                    }
                    case 4 {
                        $t1 := 0
                        /// @src 2:173:174
                        $t2 := $Gt(x, $t1)
                        /// @src 2:167:186
                        if $t2 { $block := 2 } else { $block := 3 }
                    }
                }
            }

            function $Abort(code) {
                revert(0, 0) // TODO: convention to store code
            }
            function $AbortBuiltin() {
                $Abort(-1)
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Mod(x, y) -> r {
                if eq(y, 0) { $AbortBuiltin() }
                r := mod(x, y)
            }
            function $Gt(x, y) -> r {
                r := gt(x, y)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $Eq(x, y) -> r {
                r := eq(x, y)
            }
        }
    }
}
